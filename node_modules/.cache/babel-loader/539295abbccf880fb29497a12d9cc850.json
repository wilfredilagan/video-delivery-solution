{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _class, _temp;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _AddMore = require('./AddMore');\n\nvar _AddMore2 = _interopRequireDefault(_AddMore);\n\nvar _Summary = require('./Summary');\n\nvar _Summary2 = _interopRequireDefault(_Summary);\n\nvar _SelectedArea = require('./SelectedArea');\n\nvar _SelectedArea2 = _interopRequireDefault(_SelectedArea);\n\nvar _index = require('./index');\n\nvar _Util = require('./Util');\n\nvar _DnDTypes = require('./DnDTypes');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar supportTouch = 'ontouchstart' in window;\nvar ResourceEvents = (_temp = _class = function (_Component) {\n  _inherits(ResourceEvents, _Component);\n\n  function ResourceEvents(props) {\n    _classCallCheck(this, ResourceEvents);\n\n    var _this = _possibleConstructorReturn(this, (ResourceEvents.__proto__ || Object.getPrototypeOf(ResourceEvents)).call(this, props));\n\n    _this.initDrag = function (ev) {\n      var isSelecting = _this.state.isSelecting;\n      if (isSelecting) return;\n      if ((ev.srcElement || ev.target) !== _this.eventContainer) return;\n      ev.stopPropagation();\n      var resourceEvents = _this.props.resourceEvents;\n      if (resourceEvents.groupOnly) return;\n      var clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        var touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        if (ev.buttons !== undefined && ev.buttons !== 1) return;\n        clientX = ev.clientX;\n      }\n\n      var schedulerData = _this.props.schedulerData;\n      var cellWidth = schedulerData.getContentCellWidth();\n      var pos = (0, _Util.getPos)(_this.eventContainer);\n      var startX = clientX - pos.x;\n      var leftIndex = Math.floor(startX / cellWidth);\n      var left = leftIndex * cellWidth;\n      var rightIndex = Math.ceil(startX / cellWidth);\n      var width = (rightIndex - leftIndex) * cellWidth;\n\n      _this.setState({\n        startX: startX,\n        left: left,\n        leftIndex: leftIndex,\n        width: width,\n        rightIndex: rightIndex,\n        isSelecting: true\n      });\n\n      if (supportTouch) {\n        document.documentElement.addEventListener('touchmove', _this.doDrag, false);\n        document.documentElement.addEventListener('touchend', _this.stopDrag, false);\n        document.documentElement.addEventListener('touchcancel', _this.cancelDrag, false);\n      } else {\n        document.documentElement.addEventListener('mousemove', _this.doDrag, false);\n        document.documentElement.addEventListener('mouseup', _this.stopDrag, false);\n      }\n\n      document.onselectstart = function () {\n        return false;\n      };\n\n      document.ondragstart = function () {\n        return false;\n      };\n    };\n\n    _this.doDrag = function (ev) {\n      ev.stopPropagation();\n      var clientX = 0;\n\n      if (supportTouch) {\n        if (ev.changedTouches.length == 0) return;\n        var touch = ev.changedTouches[0];\n        clientX = touch.pageX;\n      } else {\n        clientX = ev.clientX;\n      }\n\n      var startX = _this.state.startX;\n      var schedulerData = _this.props.schedulerData;\n      var headers = schedulerData.headers;\n      var cellWidth = schedulerData.getContentCellWidth();\n      var pos = (0, _Util.getPos)(_this.eventContainer);\n      var currentX = clientX - pos.x;\n      var leftIndex = Math.floor(Math.min(startX, currentX) / cellWidth);\n      leftIndex = leftIndex < 0 ? 0 : leftIndex;\n      var left = leftIndex * cellWidth;\n      var rightIndex = Math.ceil(Math.max(startX, currentX) / cellWidth);\n      rightIndex = rightIndex > headers.length ? headers.length : rightIndex;\n      var width = (rightIndex - leftIndex) * cellWidth;\n\n      _this.setState({\n        leftIndex: leftIndex,\n        left: left,\n        rightIndex: rightIndex,\n        width: width,\n        isSelecting: true\n      });\n    };\n\n    _this.stopDrag = function (ev) {\n      ev.stopPropagation();\n      var _this$props = _this.props,\n          schedulerData = _this$props.schedulerData,\n          newEvent = _this$props.newEvent,\n          resourceEvents = _this$props.resourceEvents;\n      var headers = schedulerData.headers,\n          events = schedulerData.events,\n          config = schedulerData.config,\n          cellUnit = schedulerData.cellUnit,\n          localeMoment = schedulerData.localeMoment;\n      var _this$state = _this.state,\n          leftIndex = _this$state.leftIndex,\n          rightIndex = _this$state.rightIndex;\n\n      if (supportTouch) {\n        document.documentElement.removeEventListener('touchmove', _this.doDrag, false);\n        document.documentElement.removeEventListener('touchend', _this.stopDrag, false);\n        document.documentElement.removeEventListener('touchcancel', _this.cancelDrag, false);\n      } else {\n        document.documentElement.removeEventListener('mousemove', _this.doDrag, false);\n        document.documentElement.removeEventListener('mouseup', _this.stopDrag, false);\n      }\n\n      document.onselectstart = null;\n      document.ondragstart = null;\n      var startTime = headers[leftIndex].time;\n      var endTime = resourceEvents.headerItems[rightIndex - 1].end;\n      if (cellUnit !== _index.CellUnits.Hour) endTime = localeMoment(resourceEvents.headerItems[rightIndex - 1].start).hour(23).minute(59).second(59).format(_index.DATETIME_FORMAT);\n      var slotId = resourceEvents.slotId;\n      var slotName = resourceEvents.slotName;\n\n      _this.setState({\n        startX: 0,\n        leftIndex: 0,\n        left: 0,\n        rightIndex: 0,\n        width: 0,\n        isSelecting: false\n      });\n\n      var hasConflict = false;\n\n      if (config.checkConflict) {\n        var start = localeMoment(startTime),\n            end = localeMoment(endTime);\n        events.forEach(function (e) {\n          if (schedulerData._getEventSlotId(e) === slotId) {\n            var eStart = localeMoment(e.start),\n                eEnd = localeMoment(e.end);\n            if (start >= eStart && start < eEnd || end > eStart && end <= eEnd || eStart >= start && eStart < end || eEnd > start && eEnd <= end) hasConflict = true;\n          }\n        });\n      }\n\n      if (hasConflict) {\n        var conflictOccurred = _this.props.conflictOccurred;\n\n        if (conflictOccurred != undefined) {\n          conflictOccurred(schedulerData, 'New', {\n            id: undefined,\n            start: startTime,\n            end: endTime,\n            slotId: slotId,\n            slotName: slotName,\n            title: undefined\n          }, _DnDTypes.DnDTypes.EVENT, slotId, slotName, startTime, endTime);\n        } else {\n          console.log('Conflict occurred, set conflictOccurred func in Scheduler to handle it');\n        }\n      } else {\n        if (newEvent != undefined) newEvent(schedulerData, slotId, slotName, startTime, endTime);\n      }\n    };\n\n    _this.cancelDrag = function (ev) {\n      ev.stopPropagation();\n      var isSelecting = _this.state.isSelecting;\n\n      if (isSelecting) {\n        document.documentElement.removeEventListener('touchmove', _this.doDrag, false);\n        document.documentElement.removeEventListener('touchend', _this.stopDrag, false);\n        document.documentElement.removeEventListener('touchcancel', _this.cancelDrag, false);\n        document.onselectstart = null;\n        document.ondragstart = null;\n\n        _this.setState({\n          startX: 0,\n          leftIndex: 0,\n          left: 0,\n          rightIndex: 0,\n          width: 0,\n          isSelecting: false\n        });\n      }\n    };\n\n    _this.onAddMoreClick = function (headerItem) {\n      var _this$props2 = _this.props,\n          onSetAddMoreState = _this$props2.onSetAddMoreState,\n          resourceEvents = _this$props2.resourceEvents,\n          schedulerData = _this$props2.schedulerData;\n\n      if (!!onSetAddMoreState) {\n        var config = schedulerData.config;\n        var cellWidth = schedulerData.getContentCellWidth();\n        var index = resourceEvents.headerItems.indexOf(headerItem);\n\n        if (index !== -1) {\n          var left = index * (cellWidth - 1);\n          var pos = (0, _Util.getPos)(_this.eventContainer);\n          left = left + pos.x;\n          var top = pos.y;\n          var height = (headerItem.count + 1) * config.eventItemLineHeight + 20;\n          onSetAddMoreState({\n            headerItem: headerItem,\n            left: left,\n            top: top,\n            height: height\n          });\n        }\n      }\n    };\n\n    _this.eventContainerRef = function (element) {\n      _this.eventContainer = element;\n    };\n\n    _this.state = {\n      isSelecting: false,\n      left: 0,\n      width: 0\n    };\n    return _this;\n  }\n\n  _createClass(ResourceEvents, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var schedulerData = this.props.schedulerData;\n      var config = schedulerData.config;\n\n      if (config.creatable === true) {\n        if (supportTouch) {// this.eventContainer.addEventListener('touchstart', this.initDrag, false);\n        } else {\n          this.eventContainer.addEventListener('mousedown', this.initDrag, false);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(np) {\n      if (supportTouch) {// this.eventContainer.removeEventListener('touchstart', this.initDrag, false);\n      } else {\n        this.eventContainer.removeEventListener('mousedown', this.initDrag, false);\n      }\n\n      if (np.schedulerData.config.creatable) {\n        if (supportTouch) {// this.eventContainer.addEventListener('touchstart', this.initDrag, false);\n        } else {\n          this.eventContainer.addEventListener('mousedown', this.initDrag, false);\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          resourceEvents = _props.resourceEvents,\n          schedulerData = _props.schedulerData,\n          connectDropTarget = _props.connectDropTarget,\n          dndSource = _props.dndSource;\n      var cellUnit = schedulerData.cellUnit,\n          startDate = schedulerData.startDate,\n          endDate = schedulerData.endDate,\n          config = schedulerData.config,\n          localeMoment = schedulerData.localeMoment;\n      var _state = this.state,\n          isSelecting = _state.isSelecting,\n          left = _state.left,\n          width = _state.width;\n      var cellWidth = schedulerData.getContentCellWidth();\n      var cellMaxEvents = schedulerData.getCellMaxEvents();\n      var rowWidth = schedulerData.getContentTableWidth();\n      var DnDEventItem = dndSource.getDragSource();\n      var selectedArea = isSelecting ? _react2.default.createElement(_SelectedArea2.default, _extends({}, this.props, {\n        left: left,\n        width: width\n      })) : _react2.default.createElement('div', null);\n      var eventList = [];\n      resourceEvents.headerItems.forEach(function (headerItem, index) {\n        if (headerItem.count > 0 || headerItem.summary != undefined) {\n          var isTop = config.summaryPos === _index.SummaryPos.TopRight || config.summaryPos === _index.SummaryPos.Top || config.summaryPos === _index.SummaryPos.TopLeft;\n          var marginTop = resourceEvents.hasSummary && isTop ? 1 + config.eventItemLineHeight : 1;\n          var renderEventsMaxIndex = headerItem.addMore === 0 ? cellMaxEvents : headerItem.addMoreIndex;\n          headerItem.events.forEach(function (evt, idx) {\n            if (idx < renderEventsMaxIndex && evt !== undefined && evt.render) {\n              var durationStart = localeMoment(startDate);\n              var durationEnd = localeMoment(endDate).add(1, 'days');\n\n              if (cellUnit === _index.CellUnits.Hour) {\n                durationStart = localeMoment(startDate).add(config.dayStartFrom, 'hours');\n                durationEnd = localeMoment(endDate).add(config.dayStopTo + 1, 'hours');\n              }\n\n              var eventStart = localeMoment(evt.eventItem.start);\n              var eventEnd = localeMoment(evt.eventItem.end);\n              var isStart = eventStart >= durationStart;\n              var isEnd = eventEnd <= durationEnd;\n\n              var _left = index * cellWidth + (index > 0 ? 2 : 3);\n\n              var _width = evt.span * cellWidth - (index > 0 ? 5 : 6) > 0 ? evt.span * cellWidth - (index > 0 ? 5 : 6) : 0;\n\n              var top = marginTop + idx * config.eventItemLineHeight;\n\n              var eventItem = _react2.default.createElement(DnDEventItem, _extends({}, _this2.props, {\n                key: evt.eventItem.id,\n                eventItem: evt.eventItem,\n                isStart: isStart,\n                isEnd: isEnd,\n                isInPopover: false,\n                left: _left,\n                width: _width,\n                top: top,\n                leftIndex: index,\n                rightIndex: index + evt.span\n              }));\n\n              eventList.push(eventItem);\n            }\n          });\n\n          if (headerItem.addMore > 0) {\n            var _left2 = index * cellWidth + (index > 0 ? 2 : 3);\n\n            var _width2 = cellWidth - (index > 0 ? 5 : 6);\n\n            var top = marginTop + headerItem.addMoreIndex * config.eventItemLineHeight;\n\n            var addMoreItem = _react2.default.createElement(_AddMore2.default, _extends({}, _this2.props, {\n              key: headerItem.time,\n              headerItem: headerItem,\n              number: headerItem.addMore,\n              left: _left2,\n              width: _width2,\n              top: top,\n              clickAction: _this2.onAddMoreClick\n            }));\n\n            eventList.push(addMoreItem);\n          }\n\n          if (headerItem.summary != undefined) {\n            var _top = isTop ? 1 : resourceEvents.rowHeight - config.eventItemLineHeight + 1;\n\n            var _left3 = index * cellWidth + (index > 0 ? 2 : 3);\n\n            var _width3 = cellWidth - (index > 0 ? 5 : 6);\n\n            var key = resourceEvents.slotId + '_' + headerItem.time;\n\n            var summary = _react2.default.createElement(_Summary2.default, {\n              key: key,\n              schedulerData: schedulerData,\n              summary: headerItem.summary,\n              left: _left3,\n              width: _width3,\n              top: _top\n            });\n\n            eventList.push(summary);\n          }\n        }\n      });\n      return _react2.default.createElement('tr', null, _react2.default.createElement('td', {\n        style: {\n          width: rowWidth\n        }\n      }, connectDropTarget(_react2.default.createElement('div', {\n        ref: this.eventContainerRef,\n        className: 'event-container',\n        style: {\n          height: resourceEvents.rowHeight\n        }\n      }, selectedArea, eventList))));\n    }\n  }]);\n\n  return ResourceEvents;\n}(_react.Component), _class.propTypes = {\n  resourceEvents: _propTypes.PropTypes.object.isRequired,\n  schedulerData: _propTypes.PropTypes.object.isRequired,\n  dndSource: _propTypes.PropTypes.object.isRequired,\n  onSetAddMoreState: _propTypes.PropTypes.func,\n  updateEventStart: _propTypes.PropTypes.func,\n  updateEventEnd: _propTypes.PropTypes.func,\n  moveEvent: _propTypes.PropTypes.func,\n  movingEvent: _propTypes.PropTypes.func,\n  conflictOccurred: _propTypes.PropTypes.func,\n  subtitleGetter: _propTypes.PropTypes.func,\n  eventItemClick: _propTypes.PropTypes.func,\n  viewEventClick: _propTypes.PropTypes.func,\n  viewEventText: _propTypes.PropTypes.string,\n  viewEvent2Click: _propTypes.PropTypes.func,\n  viewEvent2Text: _propTypes.PropTypes.string,\n  newEvent: _propTypes.PropTypes.func,\n  eventItemTemplateResolver: _propTypes.PropTypes.func\n}, _temp);\nexports.default = ResourceEvents;","map":null,"metadata":{},"sourceType":"script"}