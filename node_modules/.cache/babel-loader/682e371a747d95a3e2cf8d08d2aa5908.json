{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport RRule from './rrule';\nimport RRuleSet from './rruleset';\nimport dateutil from './dateutil';\nimport { includes, split } from './helpers';\nimport { parseString, parseDtstart } from './parsestring';\n/**\n * RRuleStr\n *  To parse a set of rrule strings\n */\n\nvar DEFAULT_OPTIONS = {\n  dtstart: null,\n  cache: false,\n  unfold: false,\n  forceset: false,\n  compatible: false,\n  tzid: null\n};\nexport function parseInput(s, options) {\n  var rrulevals = [];\n  var rdatevals = [];\n  var exrulevals = [];\n  var exdatevals = [];\n\n  var _a = parseDtstart(s),\n      dtstart = _a.dtstart,\n      tzid = _a.tzid;\n\n  var lines = splitIntoLines(s, options.unfold);\n  lines.forEach(function (line) {\n    if (!line) return;\n\n    var _a = breakDownLine(line),\n        name = _a.name,\n        parms = _a.parms,\n        value = _a.value;\n\n    switch (name.toUpperCase()) {\n      case 'RRULE':\n        if (parms.length) {\n          throw new Error(\"unsupported RRULE parm: \" + parms.join(','));\n        }\n\n        rrulevals.push(parseString(line));\n        break;\n\n      case 'RDATE':\n        var _b = /RDATE(?:;TZID=([^:=]+))?/i.exec(line),\n            _ = _b[0],\n            rdateTzid = _b[1];\n\n        if (rdateTzid && !tzid) {\n          tzid = rdateTzid;\n        }\n\n        rdatevals = rdatevals.concat(parseRDate(value, parms));\n        break;\n\n      case 'EXRULE':\n        if (parms.length) {\n          throw new Error(\"unsupported EXRULE parm: \" + parms.join(','));\n        }\n\n        exrulevals.push(parseString(value));\n        break;\n\n      case 'EXDATE':\n        exdatevals = exdatevals.concat(parseRDate(value, parms));\n        break;\n\n      case 'DTSTART':\n        break;\n\n      default:\n        throw new Error('unsupported property: ' + name);\n    }\n  });\n  return {\n    dtstart: dtstart,\n    tzid: tzid,\n    rrulevals: rrulevals,\n    rdatevals: rdatevals,\n    exrulevals: exrulevals,\n    exdatevals: exdatevals\n  };\n}\n\nfunction buildRule(s, options) {\n  var _a = parseInput(s, options),\n      rrulevals = _a.rrulevals,\n      rdatevals = _a.rdatevals,\n      exrulevals = _a.exrulevals,\n      exdatevals = _a.exdatevals,\n      dtstart = _a.dtstart,\n      tzid = _a.tzid;\n\n  var noCache = options.cache === false;\n\n  if (options.compatible) {\n    options.forceset = true;\n    options.unfold = true;\n  }\n\n  if (options.forceset || rrulevals.length > 1 || rdatevals.length || exrulevals.length || exdatevals.length) {\n    var rset_1 = new RRuleSet(noCache);\n    rset_1.dtstart(dtstart);\n    rset_1.tzid(tzid || undefined);\n    rrulevals.forEach(function (val) {\n      rset_1.rrule(new RRule(groomRruleOptions(val, dtstart, tzid), noCache));\n    });\n    rdatevals.forEach(function (date) {\n      rset_1.rdate(date);\n    });\n    exrulevals.forEach(function (val) {\n      rset_1.exrule(new RRule(groomRruleOptions(val, dtstart, tzid), noCache));\n    });\n    exdatevals.forEach(function (date) {\n      rset_1.exdate(date);\n    });\n    if (options.compatible && options.dtstart) rset_1.rdate(dtstart);\n    return rset_1;\n  }\n\n  var val = rrulevals[0] || {};\n  return new RRule(groomRruleOptions(val, val.dtstart || options.dtstart || dtstart, val.tzid || options.tzid || tzid), noCache);\n}\n\nexport function rrulestr(s, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return buildRule(s, initializeOptions(options));\n}\n\nfunction groomRruleOptions(val, dtstart, tzid) {\n  return tslib_1.__assign({}, val, {\n    dtstart: dtstart,\n    tzid: tzid\n  });\n}\n\nfunction initializeOptions(options) {\n  var invalid = [];\n  var keys = Object.keys(options);\n  var defaultKeys = Object.keys(DEFAULT_OPTIONS);\n  keys.forEach(function (key) {\n    if (!includes(defaultKeys, key)) invalid.push(key);\n  });\n\n  if (invalid.length) {\n    throw new Error('Invalid options: ' + invalid.join(', '));\n  }\n\n  var initializedOptions = tslib_1.__assign({}, options); // Merge in default options\n\n\n  defaultKeys.forEach(function (key) {\n    if (!includes(keys, key)) initializedOptions[key] = DEFAULT_OPTIONS[key];\n  });\n  return initializedOptions;\n}\n\nfunction extractName(line) {\n  if (line.indexOf(':') === -1) {\n    return {\n      name: 'RRULE',\n      value: line\n    };\n  }\n\n  var _a = split(line, ':', 1),\n      name = _a[0],\n      value = _a[1];\n\n  return {\n    name: name,\n    value: value\n  };\n}\n\nfunction breakDownLine(line) {\n  var _a = extractName(line),\n      name = _a.name,\n      value = _a.value;\n\n  var parms = name.split(';');\n  if (!parms) throw new Error('empty property name');\n  return {\n    name: parms[0].toUpperCase(),\n    parms: parms.slice(1),\n    value: value\n  };\n}\n\nfunction splitIntoLines(s, unfold) {\n  if (unfold === void 0) {\n    unfold = false;\n  }\n\n  s = s && s.trim();\n  if (!s) throw new Error('Invalid empty string'); // More info about 'unfold' option\n  // Go head to http://www.ietf.org/rfc/rfc2445.txt\n\n  if (!unfold) {\n    return s.split(/\\s/);\n  }\n\n  var lines = s.split('\\n');\n  var i = 0;\n\n  while (i < lines.length) {\n    // TODO\n    var line = lines[i] = lines[i].replace(/\\s+$/g, '');\n\n    if (!line) {\n      lines.splice(i, 1);\n    } else if (i > 0 && line[0] === ' ') {\n      lines[i - 1] += line.slice(1);\n      lines.splice(i, 1);\n    } else {\n      i += 1;\n    }\n  }\n\n  return lines;\n}\n\nfunction validateDateParm(parms) {\n  parms.forEach(function (parm) {\n    if (!/(VALUE=DATE(-TIME)?)|(TZID=)/.test(parm)) {\n      throw new Error('unsupported RDATE/EXDATE parm: ' + parm);\n    }\n  });\n}\n\nfunction parseRDate(rdateval, parms) {\n  validateDateParm(parms);\n  return rdateval.split(',').map(function (datestr) {\n    return dateutil.untilStringToDate(datestr);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}