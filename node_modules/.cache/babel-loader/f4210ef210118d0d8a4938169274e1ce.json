{"ast":null,"code":"var _jsxFileName = \"/Users/wilfredilagan/Documents/School/Module 5/video-delivery-solution/src/Main_recent.js\";\nimport React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport Scheduler, { SchedulerData, ViewTypes, CellUnits, DATE_FORMAT } from 'react-big-scheduler';\nimport 'react-big-scheduler/lib/css/style.css';\nimport DemoData from './DemoData_recent';\nimport withDragDropContext from './withDnDContext';\n\nclass Main_recent extends React.Component {\n  constructor(props) {\n    super(props); //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n\n    this.changeWidth = schedulerData => {\n      if (window.location.pathname === \"/nav\") {\n        schedulerData.config.schedulerWidth = \"80%\";\n      }\n    };\n\n    this.prevClick = schedulerData => {\n      schedulerData.prev();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.nextClick = schedulerData => {\n      schedulerData.next();\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onViewChange = (schedulerData, view) => {\n      schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n      schedulerData.config.customCellWidth = view.viewType === ViewTypes.Custom ? 30 : 80;\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.onSelectDate = (schedulerData, date) => {\n      schedulerData.setDate(date);\n      schedulerData.setEvents(DemoData.events);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.eventClicked = (schedulerData, event) => {\n      alert(\"You just clicked an event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops1 = (schedulerData, event) => {\n      alert(\"You just executed ops1 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.ops2 = (schedulerData, event) => {\n      alert(\"You just executed ops2 to event: {id: \".concat(event.id, \", title: \").concat(event.title, \"}\"));\n    };\n\n    this.newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n      if (window.confirm(\"Do you want to create a new event? {slotId: \".concat(slotId, \", slotName: \").concat(slotName, \", start: \").concat(start, \", end: \").concat(end, \", type: \").concat(type, \", item: \").concat(item, \"}\"))) {\n        let newFreshId = 0;\n        schedulerData.events.forEach(item => {\n          if (item.id >= newFreshId) newFreshId = item.id + 1;\n        });\n        let newEvent = {\n          id: newFreshId,\n          title: 'New event you just created',\n          start: start,\n          end: end,\n          resourceId: slotId,\n          bgColor: 'purple'\n        };\n        schedulerData.addEvent(newEvent);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.updateEventStart = (schedulerData, event, newStart) => {\n      if (window.confirm(\"Do you want to adjust the start of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newStart: \").concat(newStart, \"}\"))) {\n        schedulerData.updateEventStart(event, newStart);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.updateEventEnd = (schedulerData, event, newEnd) => {\n      if (window.confirm(\"Do you want to adjust the end of the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newEnd: \").concat(newEnd, \"}\"))) {\n        schedulerData.updateEventEnd(event, newEnd);\n      }\n\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n      if (window.confirm(\"Do you want to move the event? {eventId: \".concat(event.id, \", eventTitle: \").concat(event.title, \", newSlotId: \").concat(slotId, \", newSlotName: \").concat(slotName, \", newStart: \").concat(start, \", newEnd: \").concat(end))) {\n        schedulerData.moveEvent(event, slotId, slotName, start, end);\n        this.setState({\n          viewModel: schedulerData\n        });\n      }\n    };\n\n    this.onScrollRight = (schedulerData, schedulerContent, maxScrollLeft) => {\n      if (schedulerData.ViewTypes === ViewTypes.Day) {\n        schedulerData.next();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n          viewModel: schedulerData\n        });\n        schedulerContent.scrollLeft = maxScrollLeft - 10;\n      }\n    };\n\n    this.onScrollLeft = (schedulerData, schedulerContent, maxScrollLeft) => {\n      if (schedulerData.ViewTypes === ViewTypes.Day) {\n        schedulerData.prev();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n          viewModel: schedulerData\n        });\n        schedulerContent.scrollLeft = 10;\n      }\n    };\n\n    this.isNonWorkingTime = (schedulerData, time) => {\n      const localeMoment = schedulerData.localeMoment;\n\n      if (schedulerData.cellUnit === CellUnits.Hour) {\n        let hour = localeMoment(time).hour();\n        if (hour < 1) return true;\n      } else {\n        let dayOfWeek = localeMoment(time).weekday();\n        if (dayOfWeek === 0 || dayOfWeek === 6) return true;\n      }\n\n      return false;\n    };\n\n    this.onScrollTop = (schedulerData, schedulerContent, maxScrollTop) => {\n      console.log('onScrollTop');\n    };\n\n    this.onScrollBottom = (schedulerData, schedulerContent, maxScrollTop) => {\n      console.log('onScrollBottom');\n    };\n\n    this.toggleExpandFunc = (schedulerData, slotId) => {\n      schedulerData.toggleExpandStatus(slotId);\n      this.setState({\n        viewModel: schedulerData\n      });\n    };\n\n    this.getCustomDate = (schedulerData, num, date = undefined) => {\n      //const {viewType} = schedulerData;\n      let selectDate = schedulerData.startDate;\n      if (date !== undefined) selectDate = date;\n      let startDate = num === 0 ? selectDate : schedulerData.localeMoment(selectDate).add(2 * num, 'days').format(DATE_FORMAT),\n          endDate = schedulerData.localeMoment(startDate).add(60, 'months').format(DATE_FORMAT),\n          cellUnit = CellUnits.Year;\n      return {\n        startDate,\n        endDate,\n        cellUnit\n      };\n    };\n\n    let _schedulerData = new SchedulerData('2019-08-21', ViewTypes.Year, false, false, {\n      schedulerWidth: '80%',\n      movable: true,\n      yearResourceTableWidth: 400,\n      dayResourceTableWidth: 400,\n      weekResourceTableWidth: 400,\n      monthResourceTableWidth: 400,\n      quarterResourceTableWidth: 400,\n      customResourceTableWidth: 400,\n      views: [{\n        viewName: 'Month',\n        viewType: ViewTypes.Month,\n        showAgenda: false,\n        isEventPerspective: false\n      }, {\n        viewName: 'Quarter',\n        viewType: ViewTypes.Quarter,\n        showAgenda: false,\n        isEventPerspective: false\n      }, {\n        viewName: 'One Year',\n        viewType: ViewTypes.Year,\n        showAgenda: false,\n        isEventPerspective: false\n      }, {\n        viewName: 'Five Years',\n        viewType: ViewTypes.Custom,\n        showAgenda: false,\n        isEventPerspective: false\n      }]\n    }, {\n      getCustomDateFunc: this.getCustomDate,\n      isNonWorkingTimeFunc: this.isNonWorkingTime\n    });\n\n    _schedulerData.localeMoment.locale('en');\n\n    _schedulerData.setResources(DemoData.resources);\n\n    _schedulerData.setEvents(DemoData.events);\n\n    this.state = {\n      viewModel: _schedulerData,\n      changeWidth: ''\n    };\n    this.changeWidth = this.changeWidth.bind(this);\n  }\n\n  render() {\n    const viewModel = this.state.viewModel; //register the external DnDSources*/\n    //let dndSources = [taskDndSource, resourceDndSource];\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      style: {\n        textAlign: \"left\",\n        fontSize: \"30px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, \"Recent Items\"), React.createElement(Scheduler, {\n      schedulerData: viewModel,\n      prevClick: this.prevClick,\n      nextClick: this.nextClick,\n      onSelectDate: this.onSelectDate,\n      onViewChange: this.onViewChange,\n      eventItemClick: this.eventClicked,\n      viewEventClick: this.ops1,\n      viewEventText: \"Ops 1\",\n      viewEvent2Text: \"Ops 2\",\n      viewEvent2Click: this.ops2,\n      updateEventStart: this.updateEventStart,\n      updateEventEnd: this.updateEventEnd,\n      moveEvent: this.moveEvent,\n      newEvent: this.newEvent,\n      onScrollLeft: this.onScrollLeft,\n      onScrollRight: this.onScrollRight,\n      onScrollTop: this.onScrollTop,\n      onScrollBottom: this.onScrollBottom,\n      toggleExpandFunc: this.toggleExpandFunc,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default withDragDropContext(Main_recent);","map":{"version":3,"sources":["/Users/wilfredilagan/Documents/School/Module 5/video-delivery-solution/src/Main_recent.js"],"names":["React","Jumbotron","Scheduler","SchedulerData","ViewTypes","CellUnits","DATE_FORMAT","DemoData","withDragDropContext","Main_recent","Component","constructor","props","changeWidth","schedulerData","window","location","pathname","config","schedulerWidth","prevClick","prev","setEvents","events","setState","viewModel","nextClick","next","onViewChange","view","setViewType","viewType","showAgenda","isEventPerspective","customCellWidth","Custom","onSelectDate","date","setDate","eventClicked","event","alert","id","title","ops1","ops2","newEvent","slotId","slotName","start","end","type","item","confirm","newFreshId","forEach","resourceId","bgColor","addEvent","updateEventStart","newStart","updateEventEnd","newEnd","moveEvent","onScrollRight","schedulerContent","maxScrollLeft","Day","scrollLeft","onScrollLeft","isNonWorkingTime","time","localeMoment","cellUnit","Hour","hour","dayOfWeek","weekday","onScrollTop","maxScrollTop","console","log","onScrollBottom","toggleExpandFunc","toggleExpandStatus","getCustomDate","num","undefined","selectDate","startDate","add","format","endDate","Year","movable","yearResourceTableWidth","dayResourceTableWidth","weekResourceTableWidth","monthResourceTableWidth","quarterResourceTableWidth","customResourceTableWidth","views","viewName","Month","Quarter","getCustomDateFunc","isNonWorkingTimeFunc","locale","setResources","resources","state","bind","render","textAlign","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport Scheduler, {SchedulerData, ViewTypes, CellUnits, DATE_FORMAT} from 'react-big-scheduler'\nimport 'react-big-scheduler/lib/css/style.css'\nimport DemoData from './DemoData_recent'\nimport withDragDropContext from './withDnDContext'\n\nclass Main_recent extends React.Component {\n    constructor(props){\n        super(props);\n\n        //let schedulerData = new SchedulerData(new moment(\"2017-12-18\").format(DATE_FORMAT), ViewTypes.Week);\n        let schedulerData = new SchedulerData('2019-08-21', ViewTypes.Year, false, false, {\n        schedulerWidth: '80%', \n        movable: true, \n        yearResourceTableWidth: 400, \n        dayResourceTableWidth: 400, \n        weekResourceTableWidth:400, \n        monthResourceTableWidth:400, \n        quarterResourceTableWidth:400,\n        customResourceTableWidth:400,\n        views: [\n            {viewName: 'Month', viewType: ViewTypes.Month, showAgenda: false, isEventPerspective: false},\n            {viewName: 'Quarter', viewType: ViewTypes.Quarter, showAgenda: false, isEventPerspective: false},\n            {viewName: 'One Year', viewType: ViewTypes.Year, showAgenda: false, isEventPerspective: false},\n            {viewName: 'Five Years', viewType: ViewTypes.Custom, showAgenda: false, isEventPerspective: false},\n        ],\n        \n        }, {getCustomDateFunc: this.getCustomDate,\n            isNonWorkingTimeFunc: this.isNonWorkingTime,\n        });\n        \n        schedulerData.localeMoment.locale('en');\n        schedulerData.setResources(DemoData.resources);\n        schedulerData.setEvents(DemoData.events);\n        this.state = {\n            viewModel: schedulerData,\n            changeWidth: '',\n        }\n        this.changeWidth = this.changeWidth.bind(this);\n    }\n\n    changeWidth = (schedulerData) =>{\n        if (window.location.pathname === \"/nav\"){\n            schedulerData.config.schedulerWidth = \"80%\";\n        }\n    }\n\n    prevClick = (schedulerData)=> {\n        schedulerData.prev();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n            viewModel: schedulerData\n        })\n    }\n\n    nextClick = (schedulerData)=> {\n        schedulerData.next();\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n            viewModel: schedulerData\n        })\n    }\n\n    onViewChange = (schedulerData, view) => {\n        schedulerData.setViewType(view.viewType, view.showAgenda, view.isEventPerspective);\n        schedulerData.config.customCellWidth = view.viewType === ViewTypes.Custom ? 30 : 80;\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n            viewModel: schedulerData\n        })\n    }\n\n    onSelectDate = (schedulerData, date) => {\n        schedulerData.setDate(date);\n        schedulerData.setEvents(DemoData.events);\n        this.setState({\n            viewModel: schedulerData\n        })\n    }\n\n    eventClicked = (schedulerData, event) => {\n        alert(`You just clicked an event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    ops1 = (schedulerData, event) => {\n        alert(`You just executed ops1 to event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    ops2 = (schedulerData, event) => {\n        alert(`You just executed ops2 to event: {id: ${event.id}, title: ${event.title}}`);\n    };\n\n    newEvent = (schedulerData, slotId, slotName, start, end, type, item) => {\n        if(window.confirm(`Do you want to create a new event? {slotId: ${slotId}, slotName: ${slotName}, start: ${start}, end: ${end}, type: ${type}, item: ${item}}`)){\n\n            let newFreshId = 0;\n            schedulerData.events.forEach((item) => {\n                if(item.id >= newFreshId)\n                    newFreshId = item.id + 1;\n            });\n\n            let newEvent = {\n                id: newFreshId,\n                title: 'New event you just created',\n                start: start,\n                end: end,\n                resourceId: slotId,\n                bgColor: 'purple'\n            }\n            schedulerData.addEvent(newEvent);\n            this.setState({\n                viewModel: schedulerData\n            })\n        }\n    }\n\n    updateEventStart = (schedulerData, event, newStart) => {\n        if(window.confirm(`Do you want to adjust the start of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newStart: ${newStart}}`)) {\n            schedulerData.updateEventStart(event, newStart);\n        }\n        this.setState({\n            viewModel: schedulerData\n        })\n    }\n\n    updateEventEnd = (schedulerData, event, newEnd) => {\n        if(window.confirm(`Do you want to adjust the end of the event? {eventId: ${event.id}, eventTitle: ${event.title}, newEnd: ${newEnd}}`)) {\n            schedulerData.updateEventEnd(event, newEnd);\n        }\n        this.setState({\n            viewModel: schedulerData\n        })\n    }\n\n    moveEvent = (schedulerData, event, slotId, slotName, start, end) => {\n        if(window.confirm(`Do you want to move the event? {eventId: ${event.id}, eventTitle: ${event.title}, newSlotId: ${slotId}, newSlotName: ${slotName}, newStart: ${start}, newEnd: ${end}`)) {\n            schedulerData.moveEvent(event, slotId, slotName, start, end);\n            this.setState({\n                viewModel: schedulerData\n            })\n        }\n    }\n\n    onScrollRight = (schedulerData, schedulerContent, maxScrollLeft) => {\n        if(schedulerData.ViewTypes === ViewTypes.Day) {\n            schedulerData.next();\n            schedulerData.setEvents(DemoData.events);\n            this.setState({\n                viewModel: schedulerData\n            });\n    \n            schedulerContent.scrollLeft = maxScrollLeft - 10;\n        }\n    }\n\n    onScrollLeft = (schedulerData, schedulerContent, maxScrollLeft) => {\n        if(schedulerData.ViewTypes === ViewTypes.Day) {\n            schedulerData.prev();\n            schedulerData.setEvents(DemoData.events);\n            this.setState({\n                viewModel: schedulerData\n            });\n\n            schedulerContent.scrollLeft = 10;\n        }\n    }\n    isNonWorkingTime = (schedulerData, time) => {\n        const { localeMoment } = schedulerData;\n        if(schedulerData.cellUnit === CellUnits.Hour){\n            let hour = localeMoment(time).hour();\n            if(hour < 1)\n                return true;\n        }\n        else {\n            let dayOfWeek = localeMoment(time).weekday();\n            if (dayOfWeek === 0 || dayOfWeek === 6)\n                return true;\n        }\n    \n        return false;\n    }\n    onScrollTop = (schedulerData, schedulerContent, maxScrollTop) => {\n        console.log('onScrollTop');\n    }\n\n    onScrollBottom = (schedulerData, schedulerContent, maxScrollTop) => {\n        console.log('onScrollBottom');\n    }\n\n    toggleExpandFunc = (schedulerData, slotId) => {\n        schedulerData.toggleExpandStatus(slotId);\n        this.setState({\n            viewModel: schedulerData\n        });\n    }\n\n    getCustomDate = (schedulerData, num, date = undefined) => {\n        //const {viewType} = schedulerData;\n        let selectDate = schedulerData.startDate;\n        if(date !== undefined)\n            selectDate = date;   \n\n        let startDate = num === 0 ? selectDate : \n            schedulerData.localeMoment(selectDate).add(2*num, 'days').format(DATE_FORMAT),\n            endDate = schedulerData.localeMoment(startDate).add(60, 'months').format(DATE_FORMAT),\n            cellUnit = CellUnits.Year;\n        \n            \n        return {\n            startDate,\n            endDate,\n            cellUnit\n        };\n    }\n    render(){\n        const {viewModel} = this.state;\n\n        //register the external DnDSources*/\n        //let dndSources = [taskDndSource, resourceDndSource];\n        return(   \n            <div>\n                <p style={{textAlign: \"left\", fontSize: \"30px\"}}>Recent Items</p>\n                <Scheduler schedulerData={viewModel}\n                               prevClick={this.prevClick}\n                               nextClick={this.nextClick}\n                               onSelectDate={this.onSelectDate}\n                               onViewChange={this.onViewChange}\n                               eventItemClick={this.eventClicked}\n                               viewEventClick={this.ops1}\n                               viewEventText=\"Ops 1\"\n                               viewEvent2Text=\"Ops 2\"\n                               viewEvent2Click={this.ops2}\n                               updateEventStart={this.updateEventStart}\n                               updateEventEnd={this.updateEventEnd}\n                               moveEvent={this.moveEvent}\n                               newEvent={this.newEvent}\n                               onScrollLeft={this.onScrollLeft}\n                               onScrollRight={this.onScrollRight}\n                               onScrollTop={this.onScrollTop}\n                               onScrollBottom={this.onScrollBottom}\n                               toggleExpandFunc={this.toggleExpandFunc}\n                    />\n                    </div>\n        )}\n\n\n}\n\nexport default withDragDropContext(Main_recent)"]},"metadata":{},"sourceType":"module"}