{"ast":null,"code":"import dateutil from './dateutil';\nimport IterResult from './iterresult';\nimport CallbackIterResult from './callbackiterresult';\nimport { Frequency } from './types';\nimport { parseOptions, initializeOptions } from './parseoptions';\nimport { parseString } from './parsestring';\nimport { optionsToString } from './optionstostring';\nimport { Cache } from './cache';\nimport { Weekday } from './weekday';\nimport { iter } from './iter/index';\n\nvar getnlp = function () {\n  // Lazy, runtime import to avoid circular refs.\n  if (!getnlp._nlp) {\n    getnlp._nlp = require('./nlp');\n  }\n\n  return getnlp._nlp;\n}; // =============================================================================\n// RRule\n// =============================================================================\n\n\nexport var Days = {\n  MO: new Weekday(0),\n  TU: new Weekday(1),\n  WE: new Weekday(2),\n  TH: new Weekday(3),\n  FR: new Weekday(4),\n  SA: new Weekday(5),\n  SU: new Weekday(6)\n};\nexport var DEFAULT_OPTIONS = {\n  freq: Frequency.YEARLY,\n  dtstart: null,\n  interval: 1,\n  wkst: Days.MO,\n  count: null,\n  until: null,\n  tzid: null,\n  bysetpos: null,\n  bymonth: null,\n  bymonthday: null,\n  bynmonthday: null,\n  byyearday: null,\n  byweekno: null,\n  byweekday: null,\n  bynweekday: null,\n  byhour: null,\n  byminute: null,\n  bysecond: null,\n  byeaster: null\n};\nexport var defaultKeys = Object.keys(DEFAULT_OPTIONS);\n/**\n *\n * @param {Options?} options - see <http://labix.org/python-dateutil/#head-cf004ee9a75592797e076752b2a889c10f445418>\n *        The only required option is `freq`, one of RRule.YEARLY, RRule.MONTHLY, ...\n * @constructor\n */\n\nvar RRule =\n/** @class */\nfunction () {\n  function RRule(options, noCache) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (noCache === void 0) {\n      noCache = false;\n    } // RFC string\n\n\n    this._cache = noCache ? null : new Cache(); // used by toString()\n\n    this.origOptions = initializeOptions(options);\n    var parsedOptions = parseOptions(options).parsedOptions;\n    this.options = parsedOptions;\n  }\n\n  RRule.parseText = function (text, language) {\n    return getnlp().parseText(text, language);\n  };\n\n  RRule.fromText = function (text, language) {\n    return getnlp().fromText(text, language);\n  };\n\n  RRule.fromString = function (str) {\n    return new RRule(RRule.parseString(str) || undefined);\n  };\n\n  RRule.prototype._iter = function (iterResult) {\n    return iter(iterResult, this.options);\n  };\n\n  RRule.prototype._cacheGet = function (what, args) {\n    if (!this._cache) return false;\n    return this._cache._cacheGet(what, args);\n  };\n\n  RRule.prototype._cacheAdd = function (what, value, args) {\n    if (!this._cache) return;\n    return this._cache._cacheAdd(what, value, args);\n  };\n  /**\n   * @param {Function} iterator - optional function that will be called\n   *                   on each date that is added. It can return false\n   *                   to stop the iteration.\n   * @return Array containing all recurrences.\n   */\n\n\n  RRule.prototype.all = function (iterator) {\n    if (iterator) {\n      return this._iter(new CallbackIterResult('all', {}, iterator));\n    }\n\n    var result = this._cacheGet('all');\n\n    if (result === false) {\n      result = this._iter(new IterResult('all', {}));\n\n      this._cacheAdd('all', result);\n    }\n\n    return result;\n  };\n  /**\n   * Returns all the occurrences of the rrule between after and before.\n   * The inc keyword defines what happens if after and/or before are\n   * themselves occurrences. With inc == True, they will be included in the\n   * list, if they are found in the recurrence set.\n   * @return Array\n   */\n\n\n  RRule.prototype.between = function (after, before, inc, iterator) {\n    if (inc === void 0) {\n      inc = false;\n    }\n\n    if (!dateutil.isValidDate(after) || !dateutil.isValidDate(before)) throw new Error('Invalid date passed in to RRule.between');\n    var args = {\n      before: before,\n      after: after,\n      inc: inc\n    };\n\n    if (iterator) {\n      return this._iter(new CallbackIterResult('between', args, iterator));\n    }\n\n    var result = this._cacheGet('between', args);\n\n    if (result === false) {\n      result = this._iter(new IterResult('between', args));\n\n      this._cacheAdd('between', result, args);\n    }\n\n    return result;\n  };\n  /**\n   * Returns the last recurrence before the given datetime instance.\n   * The inc keyword defines what happens if dt is an occurrence.\n   * With inc == True, if dt itself is an occurrence, it will be returned.\n   * @return Date or null\n   */\n\n\n  RRule.prototype.before = function (dt, inc) {\n    if (inc === void 0) {\n      inc = false;\n    }\n\n    if (!dateutil.isValidDate(dt)) throw new Error('Invalid date passed in to RRule.before');\n    var args = {\n      dt: dt,\n      inc: inc\n    };\n\n    var result = this._cacheGet('before', args);\n\n    if (result === false) {\n      result = this._iter(new IterResult('before', args));\n\n      this._cacheAdd('before', result, args);\n    }\n\n    return result;\n  };\n  /**\n   * Returns the first recurrence after the given datetime instance.\n   * The inc keyword defines what happens if dt is an occurrence.\n   * With inc == True, if dt itself is an occurrence, it will be returned.\n   * @return Date or null\n   */\n\n\n  RRule.prototype.after = function (dt, inc) {\n    if (inc === void 0) {\n      inc = false;\n    }\n\n    if (!dateutil.isValidDate(dt)) throw new Error('Invalid date passed in to RRule.after');\n    var args = {\n      dt: dt,\n      inc: inc\n    };\n\n    var result = this._cacheGet('after', args);\n\n    if (result === false) {\n      result = this._iter(new IterResult('after', args));\n\n      this._cacheAdd('after', result, args);\n    }\n\n    return result;\n  };\n  /**\n   * Returns the number of recurrences in this set. It will have go trough\n   * the whole recurrence, if this hasn't been done before.\n   */\n\n\n  RRule.prototype.count = function () {\n    return this.all().length;\n  };\n  /**\n   * Converts the rrule into its string representation\n   * @see <http://www.ietf.org/rfc/rfc2445.txt>\n   * @return String\n   */\n\n\n  RRule.prototype.toString = function () {\n    return optionsToString(this.origOptions);\n  };\n  /**\n   * Will convert all rules described in nlp:ToText\n   * to text.\n   */\n\n\n  RRule.prototype.toText = function (gettext, language, dateFormatter) {\n    return getnlp().toText(this, gettext, language, dateFormatter);\n  };\n\n  RRule.prototype.isFullyConvertibleToText = function () {\n    return getnlp().isFullyConvertible(this);\n  };\n  /**\n   * @return a RRule instance with the same freq and options\n   *          as this one (cache is not cloned)\n   */\n\n\n  RRule.prototype.clone = function () {\n    return new RRule(this.origOptions);\n  }; // RRule class 'constants'\n\n\n  RRule.FREQUENCIES = ['YEARLY', 'MONTHLY', 'WEEKLY', 'DAILY', 'HOURLY', 'MINUTELY', 'SECONDLY'];\n  RRule.YEARLY = Frequency.YEARLY;\n  RRule.MONTHLY = Frequency.MONTHLY;\n  RRule.WEEKLY = Frequency.WEEKLY;\n  RRule.DAILY = Frequency.DAILY;\n  RRule.HOURLY = Frequency.HOURLY;\n  RRule.MINUTELY = Frequency.MINUTELY;\n  RRule.SECONDLY = Frequency.SECONDLY;\n  RRule.MO = Days.MO;\n  RRule.TU = Days.TU;\n  RRule.WE = Days.WE;\n  RRule.TH = Days.TH;\n  RRule.FR = Days.FR;\n  RRule.SA = Days.SA;\n  RRule.SU = Days.SU;\n  RRule.parseString = parseString;\n  RRule.optionsToString = optionsToString;\n  return RRule;\n}();\n\nexport default RRule;","map":null,"metadata":{},"sourceType":"module"}