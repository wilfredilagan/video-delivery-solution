{"ast":null,"code":"/**\n * This class helps us to emulate python's generators, sorta.\n */\nvar IterResult =\n/** @class */\nfunction () {\n  function IterResult(method, args) {\n    this.minDate = null;\n    this.maxDate = null;\n    this._result = [];\n    this.total = 0;\n    this.method = method;\n    this.args = args;\n\n    if (method === 'between') {\n      this.maxDate = args.inc ? args.before : new Date(args.before.getTime() - 1);\n      this.minDate = args.inc ? args.after : new Date(args.after.getTime() + 1);\n    } else if (method === 'before') {\n      this.maxDate = args.inc ? args.dt : new Date(args.dt.getTime() - 1);\n    } else if (method === 'after') {\n      this.minDate = args.inc ? args.dt : new Date(args.dt.getTime() + 1);\n    }\n  }\n  /**\n   * Possibly adds a date into the result.\n   *\n   * @param {Date} date - the date isn't necessarly added to the result\n   *                      list (if it is too late/too early)\n   * @return {Boolean} true if it makes sense to continue the iteration\n   *                   false if we're done.\n   */\n\n\n  IterResult.prototype.accept = function (date) {\n    ++this.total;\n    var tooEarly = this.minDate && date < this.minDate;\n    var tooLate = this.maxDate && date > this.maxDate;\n\n    if (this.method === 'between') {\n      if (tooEarly) return true;\n      if (tooLate) return false;\n    } else if (this.method === 'before') {\n      if (tooLate) return false;\n    } else if (this.method === 'after') {\n      if (tooEarly) return true;\n      this.add(date);\n      return false;\n    }\n\n    return this.add(date);\n  };\n  /**\n   *\n   * @param {Date} date that is part of the result.\n   * @return {Boolean} whether we are interested in more values.\n   */\n\n\n  IterResult.prototype.add = function (date) {\n    this._result.push(date);\n\n    return true;\n  };\n  /**\n   * 'before' and 'after' return only one date, whereas 'all'\n   * and 'between' an array.\n   * @return {Date,Array?}\n   */\n\n\n  IterResult.prototype.getValue = function () {\n    var res = this._result;\n\n    switch (this.method) {\n      case 'all':\n      case 'between':\n        return res;\n\n      case 'before':\n      case 'after':\n      default:\n        return res.length ? res[res.length - 1] : null;\n    }\n  };\n\n  IterResult.prototype.clone = function () {\n    return new IterResult(this.method, this.args);\n  };\n\n  return IterResult;\n}();\n\nexport default IterResult;","map":null,"metadata":{},"sourceType":"module"}