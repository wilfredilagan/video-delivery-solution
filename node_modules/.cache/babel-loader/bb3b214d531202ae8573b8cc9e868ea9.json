{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _rrule = require('rrule');\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _behaviors = require('./behaviors');\n\nvar _behaviors2 = _interopRequireDefault(_behaviors);\n\nvar _index = require('./index');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar SchedulerData = function () {\n  function SchedulerData() {\n    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment2.default)().format(_index.DATE_FORMAT);\n    var viewType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _index.ViewTypes.Week;\n    var showAgenda = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var isEventPerspective = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var newConfig = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;\n    var newBehaviors = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n    var localeMoment = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;\n\n    _classCallCheck(this, SchedulerData);\n\n    this.resources = [];\n    this.events = [];\n    this.eventGroups = [];\n    this.eventGroupsAutoGenerated = true;\n    this.viewType = viewType;\n    this.cellUnit = viewType === _index.ViewTypes.Day ? _index.CellUnits.Hour : _index.CellUnits.Day;\n    this.showAgenda = showAgenda;\n    this.isEventPerspective = isEventPerspective;\n    this.resizing = false;\n    this.scrollToSpecialMoment = false;\n    this.documentWidth = 0;\n    this.localeMoment = _moment2.default;\n    if (!!localeMoment) this.localeMoment = localeMoment;\n    this.config = newConfig == undefined ? _config2.default : _extends({}, _config2.default, newConfig);\n\n    this._validateMinuteStep(this.config.minuteStep);\n\n    this.behaviors = newBehaviors == undefined ? _behaviors2.default : _extends({}, _behaviors2.default, newBehaviors);\n\n    this._resolveDate(0, date);\n\n    this._createHeaders();\n\n    this._createRenderData();\n  }\n\n  _createClass(SchedulerData, [{\n    key: 'setLocaleMoment',\n    value: function setLocaleMoment(localeMoment) {\n      if (!!localeMoment) {\n        this.localeMoment = localeMoment;\n\n        this._createHeaders();\n\n        this._createRenderData();\n      }\n    }\n  }, {\n    key: 'setResources',\n    value: function setResources(resources) {\n      this._validateResource(resources);\n\n      this.resources = Array.from(new Set(resources));\n\n      this._createRenderData();\n\n      this.setScrollToSpecialMoment(true);\n    }\n  }, {\n    key: 'setEventGroupsAutoGenerated',\n    value: function setEventGroupsAutoGenerated(autoGenerated) {\n      this.eventGroupsAutoGenerated = autoGenerated;\n    } //optional\n\n  }, {\n    key: 'setEventGroups',\n    value: function setEventGroups(eventGroups) {\n      this._validateEventGroups(eventGroups);\n\n      this.eventGroups = Array.from(new Set(eventGroups));\n      this.eventGroupsAutoGenerated = false;\n\n      this._createRenderData();\n\n      this.setScrollToSpecialMoment(true);\n    }\n  }, {\n    key: 'setMinuteStep',\n    value: function setMinuteStep(minuteStep) {\n      if (this.config.minuteStep !== minuteStep) {\n        this._validateMinuteStep(minuteStep);\n\n        this.config.minuteStep = minuteStep;\n\n        this._createHeaders();\n\n        this._createRenderData();\n      }\n    }\n  }, {\n    key: 'setBesidesWidth',\n    value: function setBesidesWidth(besidesWidth) {\n      if (besidesWidth >= 0) {\n        this.config.besidesWidth = besidesWidth;\n      }\n    }\n  }, {\n    key: 'getMinuteStepsInHour',\n    value: function getMinuteStepsInHour() {\n      return 60 / this.config.minuteStep;\n    }\n  }, {\n    key: 'addResource',\n    value: function addResource(resource) {\n      var existedResources = this.resources.filter(function (x) {\n        return x.id === resource.id;\n      });\n\n      if (existedResources.length === 0) {\n        this.resources.push(resource);\n\n        this._createRenderData();\n      }\n    }\n  }, {\n    key: 'addEventGroup',\n    value: function addEventGroup(eventGroup) {\n      var existedEventGroups = this.eventGroups.filter(function (x) {\n        return x.id === eventGroup.id;\n      });\n\n      if (existedEventGroups.length === 0) {\n        this.eventGroups.push(eventGroup);\n\n        this._createRenderData();\n      }\n    }\n  }, {\n    key: 'removeEventGroupById',\n    value: function removeEventGroupById(eventGroupId) {\n      var index = -1;\n      this.eventGroups.forEach(function (item, idx) {\n        if (item.id === eventGroupId) index = idx;\n      });\n      if (index !== -1) this.eventGroups.splice(index, 1);\n    }\n  }, {\n    key: 'containsEventGroupId',\n    value: function containsEventGroupId(eventGroupId) {\n      var index = -1;\n      this.eventGroups.forEach(function (item, idx) {\n        if (item.id === eventGroupId) index = idx;\n      });\n      return index !== -1;\n    }\n  }, {\n    key: 'setEvents',\n    value: function setEvents(events) {\n      this._validateEvents(events);\n\n      this.events = Array.from(events);\n      if (this.eventGroupsAutoGenerated) this._generateEventGroups();\n      if (this.config.recurringEventsEnabled) this._handleRecurringEvents();\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'setScrollToSpecialMoment',\n    value: function setScrollToSpecialMoment(scrollToSpecialMoment) {\n      if (this.config.scrollToSpecialMomentEnabled) this.scrollToSpecialMoment = scrollToSpecialMoment;\n    }\n  }, {\n    key: 'prev',\n    value: function prev() {\n      this._resolveDate(-1);\n\n      this.events = [];\n\n      this._createHeaders();\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'next',\n    value: function next() {\n      this._resolveDate(1);\n\n      this.events = [];\n\n      this._createHeaders();\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'setDate',\n    value: function setDate() {\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _moment2.default)().format(_index.DATE_FORMAT);\n\n      this._resolveDate(0, date);\n\n      this.events = [];\n\n      this._createHeaders();\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'setViewType',\n    value: function setViewType() {\n      var viewType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _index.ViewTypes.Week;\n      var showAgenda = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isEventPerspective = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      this.showAgenda = showAgenda;\n      this.isEventPerspective = isEventPerspective;\n      this.cellUnit = _index.CellUnits.Day;\n\n      if (this.viewType !== viewType) {\n        var date = this.startDate;\n\n        if (viewType === _index.ViewTypes.Custom || viewType === _index.ViewTypes.Custom1 || viewType === _index.ViewTypes.Custom2) {\n          this.viewType = viewType;\n\n          this._resolveDate(0, date);\n        } else {\n          if (this.viewType < viewType) {\n            if (viewType === _index.ViewTypes.Week) {\n              this.startDate = this.localeMoment(date).startOf('week').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('week').format(_index.DATE_FORMAT);\n            } else if (viewType === _index.ViewTypes.Month) {\n              this.startDate = this.localeMoment(date).startOf('month').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('month').format(_index.DATE_FORMAT);\n            } else if (viewType === _index.ViewTypes.Quarter) {\n              this.startDate = this.localeMoment(date).startOf('quarter').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('quarter').format(_index.DATE_FORMAT);\n            } else if (viewType === _index.ViewTypes.Year) {\n              this.startDate = this.localeMoment(date).startOf('year').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('year').format(_index.DATE_FORMAT);\n            }\n          } else {\n            var start = this.localeMoment(this.startDate);\n            var end = this.localeMoment(this.endDate).add(1, 'days');\n\n            if (this.selectDate !== undefined) {\n              var selectDate = this.localeMoment(this.selectDate);\n\n              if (selectDate >= start && selectDate < end) {\n                date = this.selectDate;\n              }\n            }\n\n            var now = this.localeMoment();\n\n            if (now >= start && now < end) {\n              date = now.format(_index.DATE_FORMAT);\n            }\n\n            if (viewType === _index.ViewTypes.Day) {\n              this.startDate = date;\n              this.endDate = this.startDate;\n              this.cellUnit = _index.CellUnits.Hour;\n            } else if (viewType === _index.ViewTypes.Week) {\n              this.startDate = this.localeMoment(date).startOf('week').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('week').format(_index.DATE_FORMAT);\n            } else if (viewType === _index.ViewTypes.Month) {\n              this.startDate = this.localeMoment(date).startOf('month').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('month').format(_index.DATE_FORMAT);\n            } else if (viewType === _index.ViewTypes.Quarter) {\n              this.startDate = this.localeMoment(date).startOf('quarter').format(_index.DATE_FORMAT);\n              this.endDate = this.localeMoment(this.startDate).endOf('quarter').format(_index.DATE_FORMAT);\n            }\n          }\n\n          this.viewType = viewType;\n        }\n\n        this.events = [];\n\n        this._createHeaders();\n\n        this._createRenderData();\n\n        this.setScrollToSpecialMoment(true);\n      }\n    }\n  }, {\n    key: 'setSchedulerMaxHeight',\n    value: function setSchedulerMaxHeight(newSchedulerMaxHeight) {\n      this.config.schedulerMaxHeight = newSchedulerMaxHeight;\n    }\n  }, {\n    key: 'isSchedulerResponsive',\n    value: function isSchedulerResponsive() {\n      return !!this.config.schedulerWidth.endsWith && this.config.schedulerWidth.endsWith(\"%\");\n    }\n  }, {\n    key: 'toggleExpandStatus',\n    value: function toggleExpandStatus(slotId) {\n      var slotEntered = false;\n      var slotIndent = -1;\n      var isExpanded = false;\n      var expandedMap = new Map();\n      this.renderData.forEach(function (item) {\n        if (slotEntered === false) {\n          if (item.slotId === slotId && item.hasChildren) {\n            slotEntered = true;\n            isExpanded = !item.expanded;\n            item.expanded = isExpanded;\n            slotIndent = item.indent;\n            expandedMap.set(item.indent, {\n              expanded: item.expanded,\n              render: item.render\n            });\n          }\n        } else {\n          if (item.indent > slotIndent) {\n            var expandStatus = expandedMap.get(item.indent - 1);\n            item.render = expandStatus.expanded && expandStatus.render;\n\n            if (item.hasChildren) {\n              expandedMap.set(item.indent, {\n                expanded: item.expanded,\n                render: item.render\n              });\n            }\n          } else {\n            slotEntered = false;\n          }\n        }\n      });\n    }\n  }, {\n    key: 'isResourceViewResponsive',\n    value: function isResourceViewResponsive() {\n      var resourceTableWidth = this.getResourceTableConfigWidth();\n      return !!resourceTableWidth.endsWith && resourceTableWidth.endsWith(\"%\");\n    }\n  }, {\n    key: 'isContentViewResponsive',\n    value: function isContentViewResponsive() {\n      var contentCellWidth = this.getContentCellConfigWidth();\n      return !!contentCellWidth.endsWith && contentCellWidth.endsWith(\"%\");\n    }\n  }, {\n    key: 'getSchedulerWidth',\n    value: function getSchedulerWidth() {\n      var baseWidth = this.documentWidth - this.config.besidesWidth > 0 ? this.documentWidth - this.config.besidesWidth : 0;\n      return this.isSchedulerResponsive() ? parseInt(baseWidth * Number(this.config.schedulerWidth.slice(0, -1)) / 100) : this.config.schedulerWidth;\n    }\n  }, {\n    key: 'getResourceTableWidth',\n    value: function getResourceTableWidth() {\n      var resourceTableConfigWidth = this.getResourceTableConfigWidth();\n      var schedulerWidth = this.getSchedulerWidth();\n      var resourceTableWidth = this.isResourceViewResponsive() ? parseInt(schedulerWidth * Number(resourceTableConfigWidth.slice(0, -1)) / 100) : resourceTableConfigWidth;\n      if (this.isSchedulerResponsive() && this.getContentTableWidth() + resourceTableWidth < schedulerWidth) resourceTableWidth = schedulerWidth - this.getContentTableWidth();\n      return resourceTableWidth;\n    }\n  }, {\n    key: 'getContentCellWidth',\n    value: function getContentCellWidth() {\n      var contentCellConfigWidth = this.getContentCellConfigWidth();\n      var schedulerWidth = this.getSchedulerWidth();\n      return this.isContentViewResponsive() ? parseInt(schedulerWidth * Number(contentCellConfigWidth.slice(0, -1)) / 100) : contentCellConfigWidth;\n    }\n  }, {\n    key: 'getContentTableWidth',\n    value: function getContentTableWidth() {\n      return this.headers.length * this.getContentCellWidth();\n    }\n  }, {\n    key: 'getScrollToSpecialMoment',\n    value: function getScrollToSpecialMoment() {\n      if (this.config.scrollToSpecialMomentEnabled) return this.scrollToSpecialMoment;\n      return false;\n    }\n  }, {\n    key: 'getSlots',\n    value: function getSlots() {\n      return this.isEventPerspective ? this.eventGroups : this.resources;\n    }\n  }, {\n    key: 'getSlotById',\n    value: function getSlotById(slotId) {\n      var slots = this.getSlots();\n      var slot = undefined;\n      slots.forEach(function (item) {\n        if (item.id === slotId) slot = item;\n      });\n      return slot;\n    }\n  }, {\n    key: 'getResourceById',\n    value: function getResourceById(resourceId) {\n      var resource = undefined;\n      this.resources.forEach(function (item) {\n        if (item.id === resourceId) resource = item;\n      });\n      return resource;\n    }\n  }, {\n    key: 'getTableHeaderHeight',\n    value: function getTableHeaderHeight() {\n      return this.config.tableHeaderHeight;\n    }\n  }, {\n    key: 'getSchedulerContentDesiredHeight',\n    value: function getSchedulerContentDesiredHeight() {\n      var height = 0;\n      this.renderData.forEach(function (item) {\n        if (item.render) height += item.rowHeight;\n      });\n      return height;\n    }\n  }, {\n    key: 'getCellMaxEvents',\n    value: function getCellMaxEvents() {\n      return this.viewType === _index.ViewTypes.Week ? this.config.weekMaxEvents : this.viewType === _index.ViewTypes.Day ? this.config.dayMaxEvents : this.viewType === _index.ViewTypes.Month ? this.config.monthMaxEvents : this.viewType === _index.ViewTypes.Year ? this.config.yearMaxEvents : this.viewType === _index.ViewTypes.Quarter ? this.config.quarterMaxEvents : this.config.customMaxEvents;\n    }\n  }, {\n    key: 'getDateLabel',\n    value: function getDateLabel() {\n      var start = this.localeMoment(this.startDate);\n      var end = this.localeMoment(this.endDate);\n      var dateLabel = start.format('LL');\n      if (start != end) dateLabel = start.format('LL') + '-' + end.format('LL');\n      if (!!this.behaviors.getDateLabelFunc) dateLabel = this.behaviors.getDateLabelFunc(this, this.viewType, this.startDate, this.endDate);\n      return dateLabel;\n    }\n  }, {\n    key: 'addEvent',\n    value: function addEvent(newEvent) {\n      this._attachEvent(newEvent);\n\n      if (this.eventGroupsAutoGenerated) this._generateEventGroups();\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'updateEventStart',\n    value: function updateEventStart(event, newStart) {\n      this._detachEvent(event);\n\n      event.start = newStart;\n\n      this._attachEvent(event);\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'updateEventEnd',\n    value: function updateEventEnd(event, newEnd) {\n      event.end = newEnd;\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'moveEvent',\n    value: function moveEvent(event, newSlotId, newSlotName, newStart, newEnd) {\n      this._detachEvent(event);\n\n      if (this.isEventPerspective) {\n        event.groupId = newSlotId;\n        event.groupName = newSlotName;\n      } else event.resourceId = newSlotId;\n\n      event.end = newEnd;\n      event.start = newStart;\n\n      this._attachEvent(event);\n\n      this._createRenderData();\n    }\n  }, {\n    key: 'isEventInTimeWindow',\n    value: function isEventInTimeWindow(eventStart, eventEnd, windowStart, windowEnd) {\n      return eventStart < windowEnd && eventEnd > windowStart;\n    }\n  }, {\n    key: 'removeEvent',\n    value: function removeEvent(event) {\n      var index = this.events.indexOf(event);\n\n      if (index !== -1) {\n        this.events.splice(index, 1);\n\n        this._createRenderData();\n      }\n    }\n  }, {\n    key: 'removeEventById',\n    value: function removeEventById(eventId) {\n      var index = -1;\n      this.events.forEach(function (item, idx) {\n        if (item.id === eventId) index = idx;\n      });\n\n      if (index !== -1) {\n        this.events.splice(index, 1);\n\n        this._createRenderData();\n      }\n    }\n  }, {\n    key: 'getResourceTableConfigWidth',\n    value: function getResourceTableConfigWidth() {\n      if (this.showAgenda) return this.config.agendaResourceTableWidth;\n      return this.viewType === _index.ViewTypes.Week ? this.config.weekResourceTableWidth : this.viewType === _index.ViewTypes.Day ? this.config.dayResourceTableWidth : this.viewType === _index.ViewTypes.Month ? this.config.monthResourceTableWidth : this.viewType === _index.ViewTypes.Year ? this.config.yearResourceTableWidth : this.viewType === _index.ViewTypes.Quarter ? this.config.quarterResourceTableWidth : this.config.customResourceTableWidth;\n    }\n  }, {\n    key: 'getContentCellConfigWidth',\n    value: function getContentCellConfigWidth() {\n      return this.viewType === _index.ViewTypes.Week ? this.config.weekCellWidth : this.viewType === _index.ViewTypes.Day ? this.config.dayCellWidth : this.viewType === _index.ViewTypes.Month ? this.config.monthCellWidth : this.viewType === _index.ViewTypes.Year ? this.config.yearCellWidth : this.viewType === _index.ViewTypes.Quarter ? this.config.quarterCellWidth : this.config.customCellWidth;\n    }\n  }, {\n    key: '_setDocumentWidth',\n    value: function _setDocumentWidth(documentWidth) {\n      if (documentWidth >= 0) {\n        this.documentWidth = documentWidth;\n      }\n    }\n  }, {\n    key: '_detachEvent',\n    value: function _detachEvent(event) {\n      var index = this.events.indexOf(event);\n      if (index !== -1) this.events.splice(index, 1);\n    }\n  }, {\n    key: '_attachEvent',\n    value: function _attachEvent(event) {\n      var _this = this;\n\n      var pos = 0;\n      var eventStart = this.localeMoment(event.start);\n      this.events.forEach(function (item, index) {\n        var start = _this.localeMoment(item.start);\n\n        if (eventStart >= start) pos = index + 1;\n      });\n      this.events.splice(pos, 0, event);\n    }\n  }, {\n    key: '_handleRecurringEvents',\n    value: function _handleRecurringEvents() {\n      var _this2 = this;\n\n      var recurringEvents = this.events.filter(function (x) {\n        return !!x.rrule;\n      });\n      recurringEvents.forEach(function (item) {\n        _this2._detachEvent(item);\n      });\n      recurringEvents.forEach(function (item) {\n        var windowStart = _this2.localeMoment(_this2.startDate),\n            windowEnd = _this2.localeMoment(_this2.endDate).add(1, 'days'),\n            oldStart = _this2.localeMoment(item.start),\n            oldEnd = _this2.localeMoment(item.end),\n            rule = (0, _rrule.rrulestr)(item.rrule),\n            oldDtstart = undefined;\n\n        if (!!rule.origOptions.dtstart) {\n          oldDtstart = _this2.localeMoment(rule.origOptions.dtstart);\n        }\n\n        rule.origOptions.dtstart = oldStart.toDate();\n\n        if (!rule.origOptions.until || windowEnd < _this2.localeMoment(rule.origOptions.until)) {\n          rule.origOptions.until = windowEnd.toDate();\n        } //reload\n\n\n        rule = (0, _rrule.rrulestr)(rule.toString());\n\n        if (item.exdates || item.exrule) {\n          var rruleSet = new _rrule.RRuleSet();\n          rruleSet.rrule(rule);\n\n          if (item.exrule) {\n            rruleSet.exrule((0, _rrule.rrulestr)(item.exrule));\n          }\n\n          if (item.exdates) {\n            item.exdates.forEach(function (exdate) {\n              rruleSet.exdate(_this2.localeMoment(exdate).toDate());\n            });\n          }\n\n          rule = rruleSet;\n        }\n\n        var all = rule.all();\n        var newEvents = all.map(function (time, index) {\n          return _extends({}, item, {\n            recurringEventId: item.id,\n            recurringEventStart: item.start,\n            recurringEventEnd: item.end,\n            id: item.id + '-' + index,\n            start: _this2.localeMoment(time).format(_index.DATETIME_FORMAT),\n            end: _this2.localeMoment(time).add(oldEnd.diff(oldStart), 'ms').format(_index.DATETIME_FORMAT)\n          });\n        });\n        newEvents.forEach(function (newEvent) {\n          var eventStart = _this2.localeMoment(newEvent.start),\n              eventEnd = _this2.localeMoment(newEvent.end);\n\n          if (_this2.isEventInTimeWindow(eventStart, eventEnd, windowStart, windowEnd) && (!oldDtstart || eventStart >= oldDtstart)) {\n            _this2._attachEvent(newEvent);\n          }\n        });\n      });\n    }\n  }, {\n    key: '_resolveDate',\n    value: function _resolveDate(num) {\n      var date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      if (date != undefined) this.selectDate = this.localeMoment(date).format(_index.DATE_FORMAT);\n\n      if (this.viewType === _index.ViewTypes.Week) {\n        this.startDate = date != undefined ? this.localeMoment(date).startOf('week').format(_index.DATE_FORMAT) : this.localeMoment(this.startDate).add(num, 'weeks').format(_index.DATE_FORMAT);\n        this.endDate = this.localeMoment(this.startDate).endOf('week').format(_index.DATE_FORMAT);\n      } else if (this.viewType === _index.ViewTypes.Day) {\n        this.startDate = date != undefined ? this.selectDate : this.localeMoment(this.startDate).add(num, 'days').format(_index.DATE_FORMAT);\n        this.endDate = this.startDate;\n      } else if (this.viewType === _index.ViewTypes.Month) {\n        this.startDate = date != undefined ? this.localeMoment(date).startOf('month').format(_index.DATE_FORMAT) : this.localeMoment(this.startDate).add(num, 'months').format(_index.DATE_FORMAT);\n        this.endDate = this.localeMoment(this.startDate).endOf('month').format(_index.DATE_FORMAT);\n      } else if (this.viewType === _index.ViewTypes.Quarter) {\n        this.startDate = date != undefined ? this.localeMoment(date).startOf('quarter').format(_index.DATE_FORMAT) : this.localeMoment(this.startDate).add(num, 'quarters').format(_index.DATE_FORMAT);\n        this.endDate = this.localeMoment(this.startDate).endOf('quarter').format(_index.DATE_FORMAT);\n      } else if (this.viewType === _index.ViewTypes.Year) {\n        this.startDate = date != undefined ? this.localeMoment(date).startOf('year').format(_index.DATE_FORMAT) : this.localeMoment(this.startDate).add(num, 'years').format(_index.DATE_FORMAT);\n        this.endDate = this.localeMoment(this.startDate).endOf('year').format(_index.DATE_FORMAT);\n      } else if (this.viewType === _index.ViewTypes.Custom || this.viewType === _index.ViewTypes.Custom1 || this.viewType === _index.ViewTypes.Custom2) {\n        if (this.behaviors.getCustomDateFunc != undefined) {\n          var customDate = this.behaviors.getCustomDateFunc(this, num, date);\n          this.startDate = customDate.startDate;\n          this.endDate = customDate.endDate;\n          if (!!customDate.cellUnit) this.cellUnit = customDate.cellUnit;\n        } else {\n          throw new Error('This is custom view type, set behaviors.getCustomDateFunc func to resolve the time window(startDate and endDate) yourself');\n        }\n      }\n    }\n  }, {\n    key: '_createHeaders',\n    value: function _createHeaders() {\n      var headers = [],\n          start = this.localeMoment(this.startDate),\n          end = this.localeMoment(this.endDate),\n          header = start;\n\n      if (this.showAgenda) {\n        headers.push({\n          time: header.format(_index.DATETIME_FORMAT),\n          nonWorkingTime: false\n        });\n      } else {\n        if (this.cellUnit === _index.CellUnits.Hour) {\n          start = start.add(this.config.dayStartFrom, 'hours');\n          end = end.add(this.config.dayStopTo, 'hours');\n          header = start;\n\n          while (header >= start && header <= end) {\n            var minuteSteps = this.getMinuteStepsInHour();\n\n            for (var i = 0; i < minuteSteps; i++) {\n              var hour = header.hour();\n\n              if (hour >= this.config.dayStartFrom && hour <= this.config.dayStopTo) {\n                var time = header.format(_index.DATETIME_FORMAT);\n                var nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);\n                headers.push({\n                  time: time,\n                  nonWorkingTime: nonWorkingTime\n                });\n              }\n\n              header = header.add(this.config.minuteStep, 'minutes');\n            }\n          }\n        } else {\n          while (header >= start && header <= end) {\n            var _time = header.format(_index.DATETIME_FORMAT);\n\n            var dayOfWeek = header.weekday();\n\n            if (this.config.displayWeekend || dayOfWeek !== 0 && dayOfWeek !== 6) {\n              var _nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, _time);\n\n              headers.push({\n                time: _time,\n                nonWorkingTime: _nonWorkingTime\n              });\n            }\n\n            header = header.add(1, 'days');\n          }\n        }\n      }\n\n      this.headers = headers;\n    }\n  }, {\n    key: '_createInitHeaderEvents',\n    value: function _createInitHeaderEvents(header) {\n      var start = this.localeMoment(header.time),\n          startValue = start.format(_index.DATETIME_FORMAT);\n      var endValue = this.showAgenda ? this.viewType === _index.ViewTypes.Week ? start.add(1, 'weeks').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Day ? start.add(1, 'days').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Month ? start.add(1, 'months').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Year ? start.add(1, 'years').format(_index.DATETIME_FORMAT) : this.viewType === _index.ViewTypes.Quarter ? start.add(1, 'quarters').format(_index.DATETIME_FORMAT) : this.localeMoment(this.endDate).add(1, 'days').format(_index.DATETIME_FORMAT) : this.cellUnit === _index.CellUnits.Hour ? start.add(this.config.minuteStep, 'minutes').format(_index.DATETIME_FORMAT) : start.add(1, 'days').format(_index.DATETIME_FORMAT);\n      return {\n        time: header.time,\n        nonWorkingTime: header.nonWorkingTime,\n        start: startValue,\n        end: endValue,\n        count: 0,\n        addMore: 0,\n        addMoreIndex: 0,\n        events: [,,,]\n      };\n    }\n  }, {\n    key: '_createHeaderEvent',\n    value: function _createHeaderEvent(render, span, eventItem) {\n      return {\n        render: render,\n        span: span,\n        eventItem: eventItem\n      };\n    }\n  }, {\n    key: '_getEventSlotId',\n    value: function _getEventSlotId(event) {\n      return this.isEventPerspective ? this._getEventGroupId(event) : event.resourceId;\n    }\n  }, {\n    key: '_getEventGroupId',\n    value: function _getEventGroupId(event) {\n      return !!event.groupId ? event.groupId.toString() : event.id.toString();\n    }\n  }, {\n    key: '_getEventGroupName',\n    value: function _getEventGroupName(event) {\n      return !!event.groupName ? event.groupName : event.title;\n    }\n  }, {\n    key: '_generateEventGroups',\n    value: function _generateEventGroups() {\n      var _this3 = this;\n\n      var eventGroups = [];\n      var set = new Set();\n      this.events.forEach(function (item) {\n        var groupId = _this3._getEventGroupId(item);\n\n        var groupName = _this3._getEventGroupName(item);\n\n        if (!set.has(groupId)) {\n          eventGroups.push({\n            id: groupId,\n            name: groupName,\n            state: item\n          });\n          set.add(groupId);\n        }\n      });\n      this.eventGroups = eventGroups;\n    }\n  }, {\n    key: '_createInitRenderData',\n    value: function _createInitRenderData(isEventPerspective, eventGroups, resources, headers) {\n      var _this4 = this;\n\n      var slots = isEventPerspective ? eventGroups : resources;\n      var slotTree = [],\n          slotMap = new Map();\n      slots.forEach(function (slot) {\n        var headerEvents = headers.map(function (header) {\n          return _this4._createInitHeaderEvents(header);\n        });\n        var slotRenderData = {\n          slotId: slot.id,\n          slotName: slot.name,\n          parentId: slot.parentId,\n          groupOnly: slot.groupOnly,\n          hasSummary: false,\n          rowMaxCount: 0,\n          rowHeight: _this4.config.nonAgendaSlotMinHeight !== 0 ? _this4.config.nonAgendaSlotMinHeight : _this4.config.eventItemLineHeight + 2,\n          headerItems: headerEvents,\n          indent: 0,\n          hasChildren: false,\n          expanded: true,\n          render: true\n        };\n        var id = slot.id;\n        var value = undefined;\n\n        if (slotMap.has(id)) {\n          value = slotMap.get(id);\n          value.data = slotRenderData;\n        } else {\n          value = {\n            data: slotRenderData,\n            children: []\n          };\n          slotMap.set(id, value);\n        }\n\n        var parentId = slot.parentId;\n\n        if (!parentId || parentId === id) {\n          slotTree.push(value);\n        } else {\n          var parentValue = undefined;\n\n          if (slotMap.has(parentId)) {\n            parentValue = slotMap.get(parentId);\n          } else {\n            parentValue = {\n              data: undefined,\n              children: []\n            };\n            slotMap.set(parentId, parentValue);\n          }\n\n          parentValue.children.push(value);\n        }\n      });\n      var slotStack = [];\n      var i = void 0;\n\n      for (i = slotTree.length - 1; i >= 0; i--) {\n        slotStack.push(slotTree[i]);\n      }\n\n      var initRenderData = [];\n      var currentNode = undefined;\n\n      while (slotStack.length > 0) {\n        currentNode = slotStack.pop();\n\n        if (currentNode.data.indent > 0) {\n          currentNode.data.render = this.config.defaultExpanded;\n        }\n\n        if (currentNode.children.length > 0) {\n          currentNode.data.hasChildren = true;\n          currentNode.data.expanded = this.config.defaultExpanded;\n        }\n\n        initRenderData.push(currentNode.data);\n\n        for (i = currentNode.children.length - 1; i >= 0; i--) {\n          currentNode.children[i].data.indent = currentNode.data.indent + 1;\n          slotStack.push(currentNode.children[i]);\n        }\n      }\n\n      return initRenderData;\n    }\n  }, {\n    key: '_getSpan',\n    value: function _getSpan(startTime, endTime, headers) {\n      if (this.showAgenda) return 1;\n      var start = this.localeMoment(startTime),\n          end = this.localeMoment(endTime),\n          span = 0;\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = headers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var header = _step.value;\n          var spanStart = this.localeMoment(header.time),\n              spanEnd = this.cellUnit === _index.CellUnits.Hour ? this.localeMoment(header.time).add(this.config.minuteStep, 'minutes') : this.localeMoment(header.time).add(1, 'days');\n\n          if (spanStart < end && spanEnd > start) {\n            span++;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return span;\n    }\n  }, {\n    key: '_validateResource',\n    value: function _validateResource(resources) {\n      if (Object.prototype.toString.call(resources) !== \"[object Array]\") {\n        throw new Error('Resources should be Array object');\n      }\n\n      resources.forEach(function (item, index) {\n        if (item == undefined) {\n          console.error('Resource undefined: ' + index);\n          throw new Error('Resource undefined: ' + index);\n        }\n\n        if (item.id == undefined || item.name == undefined) {\n          console.error('Resource property missed', index, item);\n          throw new Error('Resource property undefined: ' + index);\n        }\n      });\n    }\n  }, {\n    key: '_validateEventGroups',\n    value: function _validateEventGroups(eventGroups) {\n      if (Object.prototype.toString.call(eventGroups) !== \"[object Array]\") {\n        throw new Error('Event groups should be Array object');\n      }\n\n      eventGroups.forEach(function (item, index) {\n        if (item == undefined) {\n          console.error('Event group undefined: ' + index);\n          throw new Error('Event group undefined: ' + index);\n        }\n\n        if (item.id == undefined || item.name == undefined) {\n          console.error('Event group property missed', index, item);\n          throw new Error('Event group property undefined: ' + index);\n        }\n      });\n    }\n  }, {\n    key: '_validateEvents',\n    value: function _validateEvents(events) {\n      if (Object.prototype.toString.call(events) !== \"[object Array]\") {\n        throw new Error('Events should be Array object');\n      }\n\n      events.forEach(function (e, index) {\n        if (e == undefined) {\n          console.error('Event undefined: ' + index);\n          throw new Error('Event undefined: ' + index);\n        }\n\n        if (e.id == undefined || e.resourceId == undefined || e.title == undefined || e.start == undefined || e.end == undefined) {\n          console.error('Event property missed', index, e);\n          throw new Error('Event property undefined: ' + index);\n        }\n      });\n    }\n  }, {\n    key: '_validateMinuteStep',\n    value: function _validateMinuteStep(minuteStep) {\n      if (60 % minuteStep !== 0) {\n        console.error('Minute step is not set properly - 60 minutes must be divisible without remainder by this number');\n        throw new Error('Minute step is not set properly - 60 minutes must be divisible without remainder by this number');\n      }\n    }\n  }, {\n    key: '_compare',\n    value: function _compare(event1, event2) {\n      var start1 = this.localeMoment(event1.start),\n          start2 = this.localeMoment(event2.start);\n      if (start1 !== start2) return start1 < start2 ? -1 : 1;\n      var end1 = this.localeMoment(event1.end),\n          end2 = this.localeMoment(event2.end);\n      if (end1 !== end2) return end1 < end2 ? -1 : 1;\n      return event1.id < event2.id ? -1 : 1;\n    }\n  }, {\n    key: '_createRenderData',\n    value: function _createRenderData() {\n      var _this5 = this;\n\n      var initRenderData = this._createInitRenderData(this.isEventPerspective, this.eventGroups, this.resources, this.headers); //this.events.sort(this._compare);\n\n\n      var cellMaxEventsCount = this.getCellMaxEvents();\n      var cellMaxEventsCountValue = 30;\n      this.events.forEach(function (item) {\n        var resourceEventsList = initRenderData.filter(function (x) {\n          return x.slotId === _this5._getEventSlotId(item);\n        });\n\n        if (resourceEventsList.length > 0) {\n          var resourceEvents = resourceEventsList[0];\n\n          var span = _this5._getSpan(item.start, item.end, _this5.headers);\n\n          var eventStart = _this5.localeMoment(item.start),\n              eventEnd = _this5.localeMoment(item.end);\n\n          var pos = -1;\n          resourceEvents.headerItems.forEach(function (header, index) {\n            var headerStart = _this5.localeMoment(header.start),\n                headerEnd = _this5.localeMoment(header.end);\n\n            if (headerEnd > eventStart && headerStart < eventEnd) {\n              header.count = header.count + 1;\n\n              if (header.count > resourceEvents.rowMaxCount) {\n                resourceEvents.rowMaxCount = header.count;\n                var rowsCount = cellMaxEventsCount <= cellMaxEventsCountValue && resourceEvents.rowMaxCount > cellMaxEventsCount ? cellMaxEventsCount : resourceEvents.rowMaxCount;\n                var newRowHeight = rowsCount * _this5.config.eventItemLineHeight + (_this5.config.creatable && _this5.config.checkConflict === false ? 20 : 2);\n                if (newRowHeight > resourceEvents.rowHeight) resourceEvents.rowHeight = newRowHeight;\n              }\n\n              if (pos === -1) {\n                var tmp = 0;\n\n                while (header.events[tmp] !== undefined) {\n                  tmp++;\n                }\n\n                pos = tmp;\n              }\n\n              var render = headerStart <= eventStart || index === 0;\n\n              if (render === false) {\n                var previousHeader = resourceEvents.headerItems[index - 1];\n\n                var previousHeaderStart = _this5.localeMoment(previousHeader.start),\n                    previousHeaderEnd = _this5.localeMoment(previousHeader.end);\n\n                if (previousHeaderEnd <= eventStart || previousHeaderStart >= eventEnd) render = true;\n              }\n\n              header.events[pos] = _this5._createHeaderEvent(render, span, item);\n            }\n          });\n        }\n      });\n\n      if (cellMaxEventsCount <= cellMaxEventsCountValue || this.behaviors.getSummaryFunc !== undefined) {\n        initRenderData.forEach(function (resourceEvents) {\n          var hasSummary = false;\n          resourceEvents.headerItems.forEach(function (headerItem) {\n            if (cellMaxEventsCount <= cellMaxEventsCountValue) {\n              var renderItemsCount = 0,\n                  addMoreIndex = 0,\n                  index = 0;\n\n              while (index < cellMaxEventsCount - 1) {\n                if (headerItem.events[index] !== undefined) {\n                  renderItemsCount++;\n                  addMoreIndex = index + 1;\n                }\n\n                index++;\n              }\n\n              if (headerItem.events[index] !== undefined) {\n                if (renderItemsCount + 1 < headerItem.count) {\n                  headerItem.addMore = headerItem.count - renderItemsCount;\n                  headerItem.addMoreIndex = addMoreIndex;\n                }\n              } else {\n                if (renderItemsCount < headerItem.count) {\n                  headerItem.addMore = headerItem.count - renderItemsCount;\n                  headerItem.addMoreIndex = addMoreIndex;\n                }\n              }\n            }\n\n            if (_this5.behaviors.getSummaryFunc !== undefined) {\n              var events = [];\n              headerItem.events.forEach(function (e) {\n                if (!!e && !!e.eventItem) events.push(e.eventItem);\n              });\n              headerItem.summary = _this5.behaviors.getSummaryFunc(_this5, events, resourceEvents.slotId, resourceEvents.slotName, headerItem.start, headerItem.end);\n              if (!!headerItem.summary && headerItem.summary.text != undefined) hasSummary = true;\n            }\n          });\n          resourceEvents.hasSummary = hasSummary;\n\n          if (hasSummary) {\n            var rowsCount = cellMaxEventsCount <= cellMaxEventsCountValue && resourceEvents.rowMaxCount > cellMaxEventsCount ? cellMaxEventsCount : resourceEvents.rowMaxCount;\n            var newRowHeight = (rowsCount + 1) * _this5.config.eventItemLineHeight + (_this5.config.creatable && _this5.config.checkConflict === false ? 20 : 2);\n            if (newRowHeight > resourceEvents.rowHeight) resourceEvents.rowHeight = newRowHeight;\n          }\n        });\n      }\n\n      this.renderData = initRenderData;\n    }\n  }, {\n    key: '_startResizing',\n    value: function _startResizing() {\n      this.resizing = true;\n    }\n  }, {\n    key: '_stopResizing',\n    value: function _stopResizing() {\n      this.resizing = false;\n    }\n  }, {\n    key: '_isResizing',\n    value: function _isResizing() {\n      return this.resizing;\n    }\n  }]);\n\n  return SchedulerData;\n}();\n\nexports.default = SchedulerData;","map":null,"metadata":{},"sourceType":"script"}