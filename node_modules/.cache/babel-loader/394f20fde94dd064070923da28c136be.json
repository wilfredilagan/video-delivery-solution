{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { Frequency } from './types';\nimport { pymod, divmod, empty, includes } from './helpers';\nimport { dateutil } from './dateutil';\n\nvar Time =\n/** @class */\nfunction () {\n  function Time(hour, minute, second, millisecond) {\n    this.hour = hour;\n    this.minute = minute;\n    this.second = second;\n    this.millisecond = millisecond || 0;\n  }\n\n  Time.prototype.getHours = function () {\n    return this.hour;\n  };\n\n  Time.prototype.getMinutes = function () {\n    return this.minute;\n  };\n\n  Time.prototype.getSeconds = function () {\n    return this.second;\n  };\n\n  Time.prototype.getMilliseconds = function () {\n    return this.millisecond;\n  };\n\n  Time.prototype.getTime = function () {\n    return (this.hour * 60 * 60 + this.minute * 60 + this.second) * 1000 + this.millisecond;\n  };\n\n  return Time;\n}();\n\nexport { Time };\n\nvar DateTime =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(DateTime, _super);\n\n  function DateTime(year, month, day, hour, minute, second, millisecond) {\n    var _this = _super.call(this, hour, minute, second, millisecond) || this;\n\n    _this.year = year;\n    _this.month = month;\n    _this.day = day;\n    return _this;\n  }\n\n  DateTime.fromDate = function (date) {\n    return new this(date.getUTCFullYear(), date.getUTCMonth() + 1, date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.valueOf() % 1000);\n  };\n\n  DateTime.prototype.getWeekday = function () {\n    return dateutil.getWeekday(new Date(this.getTime()));\n  };\n\n  DateTime.prototype.getTime = function () {\n    return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)).getTime();\n  };\n\n  DateTime.prototype.getDay = function () {\n    return this.day;\n  };\n\n  DateTime.prototype.getMonth = function () {\n    return this.month;\n  };\n\n  DateTime.prototype.getYear = function () {\n    return this.year;\n  };\n\n  DateTime.prototype.addYears = function (years) {\n    this.year += years;\n  };\n\n  DateTime.prototype.addMonths = function (months) {\n    this.month += months;\n\n    if (this.month > 12) {\n      var yearDiv = Math.floor(this.month / 12);\n      var monthMod = pymod(this.month, 12);\n      this.month = monthMod;\n      this.year += yearDiv;\n\n      if (this.month === 0) {\n        this.month = 12;\n        --this.year;\n      }\n    }\n  };\n\n  DateTime.prototype.addWeekly = function (days, wkst) {\n    if (wkst > this.getWeekday()) {\n      this.day += -(this.getWeekday() + 1 + (6 - wkst)) + days * 7;\n    } else {\n      this.day += -(this.getWeekday() - wkst) + days * 7;\n    }\n\n    this.fixDay();\n  };\n\n  DateTime.prototype.addDaily = function (days) {\n    this.day += days;\n    this.fixDay();\n  };\n\n  DateTime.prototype.addHours = function (hours, filtered, byhour) {\n    if (filtered) {\n      // Jump to one iteration before next day\n      this.hour += Math.floor((23 - this.hour) / hours) * hours;\n    }\n\n    while (true) {\n      this.hour += hours;\n\n      var _a = divmod(this.hour, 24),\n          dayDiv = _a.div,\n          hourMod = _a.mod;\n\n      if (dayDiv) {\n        this.hour = hourMod;\n        this.addDaily(dayDiv);\n      }\n\n      if (empty(byhour) || includes(byhour, this.hour)) break;\n    }\n  };\n\n  DateTime.prototype.addMinutes = function (minutes, filtered, byhour, byminute) {\n    if (filtered) {\n      // Jump to one iteration before next day\n      this.minute += Math.floor((1439 - (this.hour * 60 + this.minute)) / minutes) * minutes;\n    }\n\n    while (true) {\n      this.minute += minutes;\n\n      var _a = divmod(this.minute, 60),\n          hourDiv = _a.div,\n          minuteMod = _a.mod;\n\n      if (hourDiv) {\n        this.minute = minuteMod;\n        this.addHours(hourDiv, false, byhour);\n      }\n\n      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute))) {\n        break;\n      }\n    }\n  };\n\n  DateTime.prototype.addSeconds = function (seconds, filtered, byhour, byminute, bysecond) {\n    if (filtered) {\n      // Jump to one iteration before next day\n      this.second += Math.floor((86399 - (this.hour * 3600 + this.minute * 60 + this.second)) / seconds) * seconds;\n    }\n\n    while (true) {\n      this.second += seconds;\n\n      var _a = divmod(this.second, 60),\n          minuteDiv = _a.div,\n          secondMod = _a.mod;\n\n      if (minuteDiv) {\n        this.second = secondMod;\n        this.addMinutes(minuteDiv, false, byhour, byminute);\n      }\n\n      if ((empty(byhour) || includes(byhour, this.hour)) && (empty(byminute) || includes(byminute, this.minute)) && (empty(bysecond) || includes(bysecond, this.second))) {\n        break;\n      }\n    }\n  };\n\n  DateTime.prototype.fixDay = function () {\n    if (this.day <= 28) {\n      return;\n    }\n\n    var daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];\n\n    if (this.day <= daysinmonth) {\n      return;\n    }\n\n    while (this.day > daysinmonth) {\n      this.day -= daysinmonth;\n      ++this.month;\n\n      if (this.month === 13) {\n        this.month = 1;\n        ++this.year;\n\n        if (this.year > dateutil.MAXYEAR) {\n          return;\n        }\n      }\n\n      daysinmonth = dateutil.monthRange(this.year, this.month - 1)[1];\n    }\n  };\n\n  DateTime.prototype.add = function (options, filtered) {\n    var freq = options.freq,\n        interval = options.interval,\n        wkst = options.wkst,\n        byhour = options.byhour,\n        byminute = options.byminute,\n        bysecond = options.bysecond;\n\n    switch (freq) {\n      case Frequency.YEARLY:\n        return this.addYears(interval);\n\n      case Frequency.MONTHLY:\n        return this.addMonths(interval);\n\n      case Frequency.WEEKLY:\n        return this.addWeekly(interval, wkst);\n\n      case Frequency.DAILY:\n        return this.addDaily(interval);\n\n      case Frequency.HOURLY:\n        return this.addHours(interval, filtered, byhour);\n\n      case Frequency.MINUTELY:\n        return this.addMinutes(interval, filtered, byhour, byminute);\n\n      case Frequency.SECONDLY:\n        return this.addSeconds(interval, filtered, byhour, byminute, bysecond);\n    }\n  };\n\n  return DateTime;\n}(Time);\n\nexport { DateTime };","map":null,"metadata":{},"sourceType":"module"}