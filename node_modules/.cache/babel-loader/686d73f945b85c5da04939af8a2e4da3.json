{"ast":null,"code":"import { freqIsDailyOrGreater } from './types';\nimport { includes, notEmpty, isPresent, isNumber, isArray } from './helpers';\nimport RRule, { defaultKeys, DEFAULT_OPTIONS } from './rrule';\nimport dateutil from './dateutil';\nimport { Weekday } from './weekday';\nimport { Time } from './datetime';\nexport function initializeOptions(options) {\n  var invalid = [];\n  var keys = Object.keys(options);\n  var initializedOptions = {}; // Shallow copy for options and origOptions and check for invalid\n\n  keys.forEach(function (key) {\n    var value = options[key];\n    initializedOptions[key] = value;\n    if (!includes(defaultKeys, key)) invalid.push(key);\n    if (dateutil.isDate(value) && !dateutil.isValidDate(value)) invalid.push(key);\n  });\n\n  if (invalid.length) {\n    throw new Error('Invalid options: ' + invalid.join(', '));\n  }\n\n  return initializedOptions;\n}\nexport function parseOptions(options) {\n  var opts = initializeOptions(options);\n  var keys = Object.keys(options); // Merge in default options\n\n  defaultKeys.forEach(function (key) {\n    if (!includes(keys, key) || !isPresent(opts[key])) opts[key] = DEFAULT_OPTIONS[key];\n  });\n  if (isPresent(opts.byeaster)) opts.freq = RRule.YEARLY;\n\n  if (!(isPresent(opts.freq) && RRule.FREQUENCIES[opts.freq])) {\n    throw new Error(\"Invalid frequency: \" + opts.freq + \" \" + options.freq);\n  }\n\n  if (!opts.dtstart) opts.dtstart = new Date(new Date().setMilliseconds(0));\n\n  if (!isPresent(opts.wkst)) {\n    opts.wkst = RRule.MO.weekday;\n  } else if (isNumber(opts.wkst)) {// cool, just keep it like that\n  } else {\n    opts.wkst = opts.wkst.weekday;\n  }\n\n  if (isPresent(opts.bysetpos)) {\n    if (isNumber(opts.bysetpos)) opts.bysetpos = [opts.bysetpos];\n\n    for (var i = 0; i < opts.bysetpos.length; i++) {\n      var v = opts.bysetpos[i];\n\n      if (v === 0 || !(v >= -366 && v <= 366)) {\n        throw new Error('bysetpos must be between 1 and 366,' + ' or between -366 and -1');\n      }\n    }\n  }\n\n  if (!(Boolean(opts.byweekno) || notEmpty(opts.byweekno) || notEmpty(opts.byyearday) || Boolean(opts.bymonthday) || notEmpty(opts.bymonthday) || isPresent(opts.byweekday) || isPresent(opts.byeaster))) {\n    switch (opts.freq) {\n      case RRule.YEARLY:\n        if (!opts.bymonth) opts.bymonth = opts.dtstart.getUTCMonth() + 1;\n        opts.bymonthday = opts.dtstart.getUTCDate();\n        break;\n\n      case RRule.MONTHLY:\n        opts.bymonthday = opts.dtstart.getUTCDate();\n        break;\n\n      case RRule.WEEKLY:\n        opts.byweekday = [dateutil.getWeekday(opts.dtstart)];\n        break;\n    }\n  } // bymonth\n\n\n  if (isPresent(opts.bymonth) && !isArray(opts.bymonth)) {\n    opts.bymonth = [opts.bymonth];\n  } // byyearday\n\n\n  if (isPresent(opts.byyearday) && !isArray(opts.byyearday) && isNumber(opts.byyearday)) {\n    opts.byyearday = [opts.byyearday];\n  } // bymonthday\n\n\n  if (!isPresent(opts.bymonthday)) {\n    opts.bymonthday = [];\n    opts.bynmonthday = [];\n  } else if (isArray(opts.bymonthday)) {\n    var bymonthday = [];\n    var bynmonthday = [];\n\n    for (var i = 0; i < opts.bymonthday.length; i++) {\n      var v = opts.bymonthday[i];\n\n      if (v > 0) {\n        bymonthday.push(v);\n      } else if (v < 0) {\n        bynmonthday.push(v);\n      }\n    }\n\n    opts.bymonthday = bymonthday;\n    opts.bynmonthday = bynmonthday;\n  } else if (opts.bymonthday < 0) {\n    opts.bynmonthday = [opts.bymonthday];\n    opts.bymonthday = [];\n  } else {\n    opts.bynmonthday = [];\n    opts.bymonthday = [opts.bymonthday];\n  } // byweekno\n\n\n  if (isPresent(opts.byweekno) && !isArray(opts.byweekno)) {\n    opts.byweekno = [opts.byweekno];\n  } // byweekday / bynweekday\n\n\n  if (!isPresent(opts.byweekday)) {\n    opts.bynweekday = null;\n  } else if (isNumber(opts.byweekday)) {\n    opts.byweekday = [opts.byweekday];\n    opts.bynweekday = null;\n  } else if (opts.byweekday instanceof Weekday) {\n    if (!opts.byweekday.n || opts.freq > RRule.MONTHLY) {\n      opts.byweekday = [opts.byweekday.weekday];\n      opts.bynweekday = null;\n    } else {\n      opts.bynweekday = [[opts.byweekday.weekday, opts.byweekday.n]];\n      opts.byweekday = null;\n    }\n  } else {\n    var byweekday = [];\n    var bynweekday = [];\n\n    for (var i = 0; i < opts.byweekday.length; i++) {\n      var wday = opts.byweekday[i];\n\n      if (isNumber(wday)) {\n        byweekday.push(wday);\n        continue;\n      }\n\n      var wd = wday;\n\n      if (!wd.n || opts.freq > RRule.MONTHLY) {\n        byweekday.push(wd.weekday);\n      } else {\n        bynweekday.push([wd.weekday, wd.n]);\n      }\n    }\n\n    opts.byweekday = notEmpty(byweekday) ? byweekday : null;\n    opts.bynweekday = notEmpty(bynweekday) ? bynweekday : null;\n  } // byhour\n\n\n  if (!isPresent(opts.byhour)) {\n    opts.byhour = opts.freq < RRule.HOURLY ? [opts.dtstart.getUTCHours()] : null;\n  } else if (isNumber(opts.byhour)) {\n    opts.byhour = [opts.byhour];\n  } // byminute\n\n\n  if (!isPresent(opts.byminute)) {\n    opts.byminute = opts.freq < RRule.MINUTELY ? [opts.dtstart.getUTCMinutes()] : null;\n  } else if (isNumber(opts.byminute)) {\n    opts.byminute = [opts.byminute];\n  } // bysecond\n\n\n  if (!isPresent(opts.bysecond)) {\n    opts.bysecond = opts.freq < RRule.SECONDLY ? [opts.dtstart.getUTCSeconds()] : null;\n  } else if (isNumber(opts.bysecond)) {\n    opts.bysecond = [opts.bysecond];\n  }\n\n  return {\n    parsedOptions: opts\n  };\n}\nexport function buildTimeset(opts) {\n  var millisecondModulo = opts.dtstart.getTime() % 1000;\n\n  if (!freqIsDailyOrGreater(opts.freq)) {\n    return [];\n  }\n\n  var timeset = [];\n  opts.byhour.forEach(function (hour) {\n    opts.byminute.forEach(function (minute) {\n      opts.bysecond.forEach(function (second) {\n        timeset.push(new Time(hour, minute, second, millisecondModulo));\n      });\n    });\n  });\n  return timeset;\n}","map":null,"metadata":{},"sourceType":"module"}